/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 *******************************************************************************/

/*===============================================================================
 *                                Includes                                       *
 ================================================================================*/
#include <stdio.h>
#include <stdlib.h>

#include "core_cm3.h"

#include "stm32f103c8.h"
#include "stm32f103c8_rcc_driver.h"
#include "stm32f103c8_gpio_driver.h"
#include "stm32f103c8_exti_driver.h"

#include "scheduler.h"

/*===============================================================================
 *                       		 	Macros			                             *
 ================================================================================*/





/*===============================================================================
 *                              Global Variables                                 *
 ================================================================================*/
extern uint32_t _estack;

uint32_t _S_MSP = (uint32_t)&_estack;		/*_estack is sympol*/
uint32_t _E_MSP;

uint32_t _S_PSP_TSAK_A;
uint32_t _E_PSP_TSAK_A;

uint32_t _S_PSP_TSAK_B;
uint32_t _E_PSP_TSAK_B;


/*===============================================================================
 *     		       		 	ISR Functions Definition 		                     *
 ================================================================================*/


/*===============================================================================
 *                                Application                                    *
 ================================================================================*/

void os_op(void)
{
	/* Main Stack */
	_E_MSP = (_S_MSP - 512);

	/* Task A Stack */
	_S_PSP_TSAK_A = (_E_MSP - 8);
	_E_PSP_TSAK_A = (_S_PSP_TSAK_A - TASK_A_STACK_SIZE);

	/* Task B Stack */
	_S_PSP_TSAK_B = (_E_PSP_TSAK_A - 8);
	_E_PSP_TSAK_B = (_S_PSP_TSAK_B - TASK_B_STACK_SIZE);


	while(1)
	{
		if(TASK_A_Flag == 1)
		{
			TASK_A_Flag = 0;
			SET_PSP(_S_PSP_TSAK_A);/* Set PSP To TASK A Stack */
			SET_SP_TO_PSP();/* SP->PSP */
			UNPRIVILEGED_ACCESS_LEVEL(); /*Privileged -> Unprivileged */

			rseTaskA = TASK_A(1,2,3);

			OS_Generate_Exception();
			SET_SP_TO_MSP();/* SP->MSP */

		}else if(TASK_B_Flag == 1)
		{
			TASK_B_Flag = 0;
			SET_PSP(_S_PSP_TSAK_B);/* Set PSP To TASK B Stack */
			SET_SP_TO_PSP();/* SP->PSP */
			UNPRIVILEGED_ACCESS_LEVEL(); /*Privileged -> Unprivileged */

			rseTaskB = TASK_B(1,2,3,4);

			OS_Generate_Exception();
			SET_SP_TO_MSP();/* SP->MSP */
		}
	}
}

void RCC_Init(void)
{
	/* Initialize System Clock  */
	MCAL_RCC_initSYSClk();

	/* Initialize Peripherals */
	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_GPIOB_ID);
	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_AFIO_ID);

}


int main(void)
{
	HW_Init();
	while(1)
	{
		
	}
}
