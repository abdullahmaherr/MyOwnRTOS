/**********************************************************************************************
 * Module : RTOS FIFO
 *
 * File Name : FIFO.c
 *
 * Author: Abdullah Maher
 *
 * Description :
 *
 * Created on: Aug 8, 2023
 ***********************************************************************************************/
#include"rtos_fifo.h"



/*
 * Description : Function To Initializing FIFO
 * */
FIFO_status FIFO_init(FIFO_t *FIFO, DATA_TYPE_t *buff, uint32_t length)
{
	if(buff == NULL_PTR)
	{
		return 	FIFO_NULL;
	}

	FIFO->base = buff;
	FIFO->head = buff;
	FIFO->tail = buff;
	FIFO->length = length;
	FIFO->count = 0;


	return FIFO_NO_ERROR;
}


/*
 * Description : Function To Add Element in FIFO
 * */
FIFO_status FIFO_enqueue(FIFO_t *FIFO, DATA_TYPE_t item)
{
	if(!(FIFO->base) || !(FIFO->head) || !(FIFO->tail))
	{
		return 	FIFO_NULL;
	}

	if(FIFO->count == FIFO->length)
	{
		return FIFO_FULL;
	}


	*(FIFO->head) = item;
	FIFO->count++;
	if(FIFO->head == (FIFO->base + (FIFO->length * sizeof(DATA_TYPE_t))))
	{
		FIFO->head = FIFO->base;
	}
	else
	{
		FIFO->head++;
	}

	return FIFO_NO_ERROR;
}


/*
 * Description : Function To Remove Element From FIFO
 * */
FIFO_status FIFO_dequeue(FIFO_t *FIFO, DATA_TYPE_t *item)
{
	if(!(FIFO->base) || !(FIFO->head) || !(FIFO->tail))
	{
		return 	FIFO_NULL;
	}

	if(FIFO->count == 0)
	{
		return FIFO_EMPTY;
	}


	*item = *(FIFO->tail);
	FIFO->count--;
	if(FIFO->tail == (FIFO->base + (FIFO->length * sizeof(DATA_TYPE_t))))
	{
		FIFO->tail = FIFO->base;
	}
	else
	{
		FIFO->tail++;
	}


	return FIFO_NO_ERROR;
}

/*
 * Description : Function To Print FIFO
 * */
void FIFO_print(FIFO_t *FIFO)
{
	DATA_TYPE_t *temp; uint32_t i;

	if(FIFO->count == 0)
	{
		printf("FIFO IS EMPTY\n");
	}else
	{
		temp = FIFO->tail;
		printf("====Printing The FIFO====\n");
		for(i = 0; i < FIFO->count; i++,temp++)
		{
			printf("%x\n",*temp);
		}
		printf("==============");
	}
}
