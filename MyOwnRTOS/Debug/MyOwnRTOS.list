
MyOwnRTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e00  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f54  08000f54  00010f5c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f54  08000f54  00010f5c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f54  08000f5c  00010f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f54  08000f54  00010f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f58  08000f58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000000  08000f5c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08000f5c  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000493a  00000000  00000000  00010f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b7e  00000000  00000000  000158bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c9c  00000000  00000000  0001643d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000250  00000000  00000000  000170e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001e8  00000000  00000000  00017330  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000308c  00000000  00000000  00017518  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000299f  00000000  00000000  0001a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0001180e  00000000  00000000  0001cf43  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002e751  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000704  00000000  00000000  0002e7cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f18 	.word	0x08000f18

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f18 	.word	0x08000f18

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <EXTI0_IRQHandler>:
/*===============================================================================
 *                       		 ISR Functions  		                         *
 ================================================================================*/

void EXTI0_IRQHandler(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI0);
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018a:	695b      	ldr	r3, [r3, #20]
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018e:	f043 0301 	orr.w	r3, r3, #1
 8000192:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[0])();
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI0_IRQHandler+0x20>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010400 	.word	0x40010400
 80001a4:	200001c8 	.word	0x200001c8

080001a8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI1);
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[1])();
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <EXTI1_IRQHandler+0x20>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4798      	blx	r3
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010400 	.word	0x40010400
 80001c8:	200001c8 	.word	0x200001c8

080001cc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI2);
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d2:	695b      	ldr	r3, [r3, #20]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[2])();
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <EXTI2_IRQHandler+0x20>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4798      	blx	r3
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010400 	.word	0x40010400
 80001ec:	200001c8 	.word	0x200001c8

080001f0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI3);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[3])();
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <EXTI3_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010400 	.word	0x40010400
 8000210:	200001c8 	.word	0x200001c8

08000214 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI4);
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[4])();
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI4_IRQHandler+0x20>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	4798      	blx	r3
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	200001c8 	.word	0x200001c8

08000238 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI5))
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0320 	and.w	r3, r3, #32
 8000244:	2b00      	cmp	r3, #0
 8000246:	d009      	beq.n	800025c <EXTI9_5_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI5);
 8000248:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a24      	ldr	r2, [pc, #144]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[5])();
 8000254:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI9);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[9])();
	}
}
 800025a:	e03e      	b.n	80002da <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI6))
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000264:	2b00      	cmp	r3, #0
 8000266:	d009      	beq.n	800027c <EXTI9_5_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI6);
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a1c      	ldr	r2, [pc, #112]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800026e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000272:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[6])();
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4798      	blx	r3
}
 800027a:	e02e      	b.n	80002da <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI7))
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000284:	2b00      	cmp	r3, #0
 8000286:	d009      	beq.n	800029c <EXTI9_5_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI7);
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800028e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000292:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[7])();
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 8000296:	69db      	ldr	r3, [r3, #28]
 8000298:	4798      	blx	r3
}
 800029a:	e01e      	b.n	80002da <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI8))
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d009      	beq.n	80002bc <EXTI9_5_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI8);
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b2:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[8])();
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4798      	blx	r3
}
 80002ba:	e00e      	b.n	80002da <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI9))
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d008      	beq.n	80002da <EXTI9_5_IRQHandler+0xa2>
		SET_BIT(EXTI->PR,EXTI9);
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d2:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[9])();
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 80002d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d8:	4798      	blx	r3
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010400 	.word	0x40010400
 80002e4:	200001c8 	.word	0x200001c8

080002e8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI10))
 80002ec:	4b30      	ldr	r3, [pc, #192]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d009      	beq.n	800030c <EXTI15_10_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI10);
 80002f8:	4b2d      	ldr	r3, [pc, #180]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a2c      	ldr	r2, [pc, #176]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 80002fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000302:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[10])();
 8000304:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000308:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI15);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[15])();
	}
}
 800030a:	e04e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI11))
 800030c:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000314:	2b00      	cmp	r3, #0
 8000316:	d009      	beq.n	800032c <EXTI15_10_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI11);
 8000318:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a24      	ldr	r2, [pc, #144]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800031e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000322:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[11])();
 8000324:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000328:	4798      	blx	r3
}
 800032a:	e03e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI12))
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000334:	2b00      	cmp	r3, #0
 8000336:	d009      	beq.n	800034c <EXTI15_10_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI12);
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800033e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000342:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[12])();
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4798      	blx	r3
}
 800034a:	e02e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI13))
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000354:	2b00      	cmp	r3, #0
 8000356:	d009      	beq.n	800036c <EXTI15_10_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI13);
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800035e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000362:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[13])();
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000368:	4798      	blx	r3
}
 800036a:	e01e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI14))
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000374:	2b00      	cmp	r3, #0
 8000376:	d009      	beq.n	800038c <EXTI15_10_IRQHandler+0xa4>
		SET_BIT(EXTI->PR,EXTI14);
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800037e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000382:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[14])();
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000388:	4798      	blx	r3
}
 800038a:	e00e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI15))
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d008      	beq.n	80003aa <EXTI15_10_IRQHandler+0xc2>
		SET_BIT(EXTI->PR,EXTI15);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800039e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003a2:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[15])();
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 80003a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003a8:	4798      	blx	r3
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40010400 	.word	0x40010400
 80003b4:	200001c8 	.word	0x200001c8

080003b8 <MCAL_RCC_initSYSClk>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void MCAL_RCC_initSYSClk(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	/* Clear Default Value For Control Register */
	CLEAR_BIT((RCC->CR),0);
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003c2:	f023 0301 	bic.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

	/* System Clock Switch*/
	RCC->CFGR |= SYS_CLK_SRC;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	6053      	str	r3, [r2, #4]

	/* AHB Prescaler */
	(RCC->CFGR) |= AHB_CLK_PRESCALER;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	6053      	str	r3, [r2, #4]

	/* APB1 Prescaler */
	(RCC->CFGR) |= (APB_LOW_CLK_PRESCALER<<8);
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	6053      	str	r3, [r2, #4]

	/* APB2 Prescaler */
	(RCC->CFGR) |= (APB_HIGH_CLK_PRESCALER<<11);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	6053      	str	r3, [r2, #4]

#if SYS_CLK_SRC == RCC_HSI_CLK

	/* Internal High-Speed Clock Enable */
	SET_BIT((RCC->CR),0);
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a03      	ldr	r2, [pc, #12]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6013      	str	r3, [r2, #0]

#error("Your SYSCLK Is False")

#endif

}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000

08000400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	6039      	str	r1, [r7, #0]
 800040a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800040c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	db0a      	blt.n	800042a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	b2da      	uxtb	r2, r3
 8000418:	490c      	ldr	r1, [pc, #48]	; (800044c <__NVIC_SetPriority+0x4c>)
 800041a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800041e:	0152      	lsls	r2, r2, #5
 8000420:	b2d2      	uxtb	r2, r2
 8000422:	440b      	add	r3, r1
 8000424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000428:	e00a      	b.n	8000440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4908      	ldr	r1, [pc, #32]	; (8000450 <__NVIC_SetPriority+0x50>)
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	f003 030f 	and.w	r3, r3, #15
 8000436:	3b04      	subs	r3, #4
 8000438:	0152      	lsls	r2, r2, #5
 800043a:	b2d2      	uxtb	r2, r2
 800043c:	440b      	add	r3, r1
 800043e:	761a      	strb	r2, [r3, #24]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	e000e100 	.word	0xe000e100
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000464:	d301      	bcc.n	800046a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000466:	2301      	movs	r3, #1
 8000468:	e00f      	b.n	800048a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <SysTick_Config+0x40>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3b01      	subs	r3, #1
 8000470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000472:	2107      	movs	r1, #7
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	f7ff ffc2 	bl	8000400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <SysTick_Config+0x40>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SysTick_Config+0x40>)
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	e000e010 	.word	0xe000e010

08000498 <SysTick_Handler>:
/*===============================================================================
 *     		       		 	Exception Handlers Definition 	                     *
 ================================================================================*/
__attribute((naked)) void SysTick_Handler(void)
{
	__asm volatile(" B SysTick_ISR ");
 8000498:	f000 b8d4 	b.w	8000644 <SysTick_ISR>

}
 800049c:	bf00      	nop

0800049e <PendSV_Handler>:

__attribute((naked)) void PendSV_Handler(void)
{
	__asm volatile(	"MRS R0,PSP	\n\t"
 800049e:	f3ef 8009 	mrs	r0, PSP
 80004a2:	f000 b8e7 	b.w	8000674 <PendSV_ContextSwitch>
					"B PendSV_ContextSwitch"
			);
}
 80004a6:	bf00      	nop

080004a8 <SVC_Handler>:

__attribute((naked)) void SVC_Handler(void)
{
	__asm volatile(	"TST LR, #4		\n\t"
 80004a8:	f01e 0f04 	tst.w	lr, #4
 80004ac:	bf0c      	ite	eq
 80004ae:	f3ef 8008 	mrseq	r0, MSP
 80004b2:	f3ef 8009 	mrsne	r0, PSP
 80004b6:	f000 ba31 	b.w	800091c <SVC_services>
					"ITE EQ			\n\t"
					"MRSEQ R0,MSP	\n\t"
					"MRSNE R0,PSP	\n\t"
					"B SVC_services"
	);
}
 80004ba:	bf00      	nop

080004bc <HardFault_Handler>:

void HardFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	while(1);
 80004c0:	e7fe      	b.n	80004c0 <HardFault_Handler+0x4>

080004c2 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
	while(1);
 80004c6:	e7fe      	b.n	80004c6 <MemManage_Handler+0x4>

080004c8 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	while(1);
 80004cc:	e7fe      	b.n	80004cc <BusFault_Handler+0x4>

080004ce <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
	while(1);
 80004d2:	e7fe      	b.n	80004d2 <UsageFault_Handler+0x4>

080004d4 <MyRTOS_HW_Init>:
/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/

void MyRTOS_HW_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	/* Initialize RCC (SysTick Timer & CPU) */

	/* Initialize System Clock  */
	MCAL_RCC_initSYSClk();
 80004d8:	f7ff ff6e 	bl	80003b8 <MCAL_RCC_initSYSClk>

	/* Initialize PendSV Priority */
	__NVIC_SetPriority(PendSV_IRQn,15);
 80004dc:	210f      	movs	r1, #15
 80004de:	f06f 0001 	mvn.w	r0, #1
 80004e2:	f7ff ff8d 	bl	8000400 <__NVIC_SetPriority>

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}

080004ea <MyRTOS_StartTicker>:

void MyRTOS_StartTicker(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
	/* For F = 8 Mh , T = 0.125 us , 1s -> 8000 Ticks */
	SysTick_Config(8000);
 80004ee:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80004f2:	f7ff ffaf 	bl	8000454 <SysTick_Config>
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}

080004fa <FIFO_init>:

/*
 * Description : Function To Initializing FIFO
 * */
FIFO_STATE FIFO_init(FIFO_t *fifo, DATA_TYPE_t *buff, uint8_t length)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b085      	sub	sp, #20
 80004fe:	af00      	add	r7, sp, #0
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	4613      	mov	r3, r2
 8000506:	71fb      	strb	r3, [r7, #7]
	/* FIFO Is NULL */
	if(buff == NULL_PTR)
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d101      	bne.n	8000512 <FIFO_init+0x18>
	{
		return 	FIFO_NULL;
 800050e:	2304      	movs	r3, #4
 8000510:	e00f      	b.n	8000532 <FIFO_init+0x38>
	}

	/* Assign FIFO */
	fifo->base = buff;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	68ba      	ldr	r2, [r7, #8]
 8000516:	601a      	str	r2, [r3, #0]
	fifo->head = buff;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	605a      	str	r2, [r3, #4]
	fifo->tail = buff;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	68ba      	ldr	r2, [r7, #8]
 8000522:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	79fa      	ldrb	r2, [r7, #7]
 8000528:	731a      	strb	r2, [r3, #12]
	fifo->count = 0;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2200      	movs	r2, #0
 800052e:	735a      	strb	r2, [r3, #13]


	return FIFO_NO_ERROR;
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <FIFO_enqueue>:

/*
 * Description : Function To Add Element in FIFO
 * */
FIFO_STATE FIFO_enqueue(FIFO_t *fifo, DATA_TYPE_t item)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	/* FIFO Is NULL */
	if(!(fifo->base) || !(fifo->head) || !(fifo->tail))
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d007      	beq.n	800055e <FIFO_enqueue+0x22>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d003      	beq.n	800055e <FIFO_enqueue+0x22>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d101      	bne.n	8000562 <FIFO_enqueue+0x26>
	{
		return 	FIFO_NULL;
 800055e:	2304      	movs	r3, #4
 8000560:	e029      	b.n	80005b6 <FIFO_enqueue+0x7a>
	}

	/* FIFO Is FULL */
	if(fifo->count == fifo->length)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7b5a      	ldrb	r2, [r3, #13]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	7b1b      	ldrb	r3, [r3, #12]
 800056a:	429a      	cmp	r2, r3
 800056c:	d101      	bne.n	8000572 <FIFO_enqueue+0x36>
	{
		return FIFO_FULL;
 800056e:	2301      	movs	r3, #1
 8000570:	e021      	b.n	80005b6 <FIFO_enqueue+0x7a>
	}

	/* Add Item To FIFO */
	*(fifo->tail) = item;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	683a      	ldr	r2, [r7, #0]
 8000578:	601a      	str	r2, [r3, #0]
	fifo->count++;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7b5b      	ldrb	r3, [r3, #13]
 800057e:	3301      	adds	r3, #1
 8000580:	b2da      	uxtb	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	735a      	strb	r2, [r3, #13]

	/* Circular Buffer */
	if((uint32_t)fifo->tail == ((uint32_t)fifo->base + (4 * fifo->length) - 4))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	461a      	mov	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7b1b      	ldrb	r3, [r3, #12]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	440b      	add	r3, r1
 800059a:	3b04      	subs	r3, #4
 800059c:	429a      	cmp	r2, r3
 800059e:	d104      	bne.n	80005aa <FIFO_enqueue+0x6e>
	{
		fifo->tail = fifo->base;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	e004      	b.n	80005b4 <FIFO_enqueue+0x78>
	}
	else
	{
		fifo->tail++;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	1d1a      	adds	r2, r3, #4
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	609a      	str	r2, [r3, #8]
	}

	return FIFO_NO_ERROR;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <FIFO_dequeue>:

/*
 * Description : Function To Remove Element From FIFO
 * */
FIFO_STATE FIFO_dequeue(FIFO_t* fifo, DATA_TYPE_t* item)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
	/* FIFO Is NULL */
	if(!(fifo->base) || !(fifo->head) || !(fifo->tail))
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <FIFO_dequeue+0x22>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <FIFO_dequeue+0x22>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d101      	bne.n	80005e6 <FIFO_dequeue+0x26>
	{
		return 	FIFO_NULL;
 80005e2:	2304      	movs	r3, #4
 80005e4:	e028      	b.n	8000638 <FIFO_dequeue+0x78>
	}

	/* FIFO Is Empty; */
	if(fifo->count == 0)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7b5b      	ldrb	r3, [r3, #13]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <FIFO_dequeue+0x32>
	{
		return FIFO_EMPTY;
 80005ee:	2303      	movs	r3, #3
 80005f0:	e022      	b.n	8000638 <FIFO_dequeue+0x78>
	}

	/* Remove Item From FIFO */
	*item = *(fifo->head);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	601a      	str	r2, [r3, #0]
	fifo->count--;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	7b5b      	ldrb	r3, [r3, #13]
 8000600:	3b01      	subs	r3, #1
 8000602:	b2da      	uxtb	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	735a      	strb	r2, [r3, #13]

	/* Circular Buffer */
	if((uint32_t)fifo->head == ((uint32_t)fifo->base + (4 * fifo->length) - 4))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	461a      	mov	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	7b1b      	ldrb	r3, [r3, #12]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	440b      	add	r3, r1
 800061c:	3b04      	subs	r3, #4
 800061e:	429a      	cmp	r2, r3
 8000620:	d104      	bne.n	800062c <FIFO_dequeue+0x6c>
	{
		fifo->head = fifo->base;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	e004      	b.n	8000636 <FIFO_dequeue+0x76>
	}
	else
	{
		fifo->head++;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	1d1a      	adds	r2, r3, #4
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	605a      	str	r2, [r3, #4]
	}


	return FIFO_NO_ERROR;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
	...

08000644 <SysTick_ISR>:

/*===============================================================================
 *                        Private Functions Definitions  		   	             *
 ================================================================================*/
void SysTick_ISR(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	SysTick_Led ^= 1;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <SysTick_ISR+0x28>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f083 0301 	eor.w	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <SysTick_ISR+0x28>)
 8000654:	701a      	strb	r2, [r3, #0]

	/* Decide What Next */
	Dispatch_Next_Task();
 8000656:	f000 f8f3 	bl	8000840 <Dispatch_Next_Task>

	/* Trigger PendSV */
	Trigger_PendSV();
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <SysTick_ISR+0x2c>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <SysTick_ISR+0x2c>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	6053      	str	r3, [r2, #4]
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200003ec 	.word	0x200003ec
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <PendSV_ContextSwitch>:

void PendSV_ContextSwitch(uint32_t* p_CurrentPSP)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	/* Get PSP Address */
	MYRTOS_TCB.Current_Task->Task_Current_PSP = p_CurrentPSP;
 800067c:	4b6f      	ldr	r3, [pc, #444]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 800067e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	635a      	str	r2, [r3, #52]	; 0x34

	/* Context Switch */

	/* PUSH R4 To R11 of Current Task */
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 8000686:	4b6d      	ldr	r3, [pc, #436]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000688:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800068c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800068e:	3a04      	subs	r2, #4
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R4" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000692:	4b6a      	ldr	r3, [pc, #424]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000694:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069a:	4622      	mov	r2, r4
 800069c:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 800069e:	4b67      	ldr	r3, [pc, #412]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80006a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a6:	3a04      	subs	r2, #4
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R5" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80006aa:	4b64      	ldr	r3, [pc, #400]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80006ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b2:	462a      	mov	r2, r5
 80006b4:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 80006b6:	4b61      	ldr	r3, [pc, #388]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80006b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006be:	3a04      	subs	r2, #4
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R6" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80006c2:	4b5e      	ldr	r3, [pc, #376]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80006c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ca:	4632      	mov	r2, r6
 80006cc:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 80006ce:	4b5b      	ldr	r3, [pc, #364]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80006d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d6:	3a04      	subs	r2, #4
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R7" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80006da:	4b58      	ldr	r3, [pc, #352]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80006dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e2:	463a      	mov	r2, r7
 80006e4:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 80006e6:	4b55      	ldr	r3, [pc, #340]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80006e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ee:	3a04      	subs	r2, #4
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R8" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80006f2:	4b52      	ldr	r3, [pc, #328]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80006f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fa:	4642      	mov	r2, r8
 80006fc:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 80006fe:	4b4f      	ldr	r3, [pc, #316]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000700:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000706:	3a04      	subs	r2, #4
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R9" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 800070a:	4b4c      	ldr	r3, [pc, #304]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 800070c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000712:	464a      	mov	r2, r9
 8000714:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 8000716:	4b49      	ldr	r3, [pc, #292]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000718:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800071c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071e:	3a04      	subs	r2, #4
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R10" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000722:	4b46      	ldr	r3, [pc, #280]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000724:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072a:	4652      	mov	r2, sl
 800072c:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 800072e:	4b43      	ldr	r3, [pc, #268]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000730:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000736:	3a04      	subs	r2, #4
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R11" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 800073a:	4b40      	ldr	r3, [pc, #256]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 800073c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000742:	465a      	mov	r2, fp
 8000744:	601a      	str	r2, [r3, #0]


	/* Switch To Next Task */
	if(MYRTOS_TCB.Next_Task != NULL)
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000748:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800074c:	2b00      	cmp	r3, #0
 800074e:	d009      	beq.n	8000764 <PendSV_ContextSwitch+0xf0>
	{
		MYRTOS_TCB.Current_Task = MYRTOS_TCB.Next_Task;
 8000750:	4b3a      	ldr	r3, [pc, #232]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000752:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000756:	4a39      	ldr	r2, [pc, #228]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000758:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		MYRTOS_TCB.Next_Task = NULL;
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 800075e:	2200      	movs	r2, #0
 8000760:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4


	/* Context Restore */

	/* POP R11 To R4 of Next Task */
	__asm volatile("MOV R11,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000764:	4b35      	ldr	r3, [pc, #212]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000766:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800076a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	469b      	mov	fp, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000772:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000778:	3204      	adds	r2, #4
 800077a:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R10,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 800077e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	469a      	mov	sl, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 800078a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800078e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000790:	3204      	adds	r2, #4
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R9,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000796:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800079a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4699      	mov	r9, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80007a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007a8:	3204      	adds	r2, #4
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R8,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80007ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4698      	mov	r8, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80007ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c0:	3204      	adds	r2, #4
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R7,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80007c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461f      	mov	r7, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80007d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d8:	3204      	adds	r2, #4
 80007da:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R6,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80007de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	461e      	mov	r6, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80007ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f0:	3204      	adds	r2, #4
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R5,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 80007f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	461d      	mov	r5, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000802:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000808:	3204      	adds	r2, #4
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R4,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 800080e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	461c      	mov	r4, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 800081a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800081e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000820:	3204      	adds	r2, #4
 8000822:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set SP To PSP Of Next Task */
	SET_PSP(MYRTOS_TCB.Current_Task->Task_Current_PSP);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <PendSV_ContextSwitch+0x1c8>)
 8000826:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800082a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082c:	f383 8809 	msr	PSP, r3
	__asm volatile("BX LR");
 8000830:	4770      	bx	lr

}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	2000001c 	.word	0x2000001c

08000840 <Dispatch_Next_Task>:


void Dispatch_Next_Task(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	/* Handle Tasks */
	if((Ready_Queue.count == 0) && (MYRTOS_TCB.Current_Task->Task_State == SUSPEND))/* Ready Queue Is Empty and Last Task Is Suspended */
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <Dispatch_Next_Task+0xcc>)
 8000846:	7b5b      	ldrb	r3, [r3, #13]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d113      	bne.n	8000874 <Dispatch_Next_Task+0x34>
 800084c:	4b30      	ldr	r3, [pc, #192]	; (8000910 <Dispatch_Next_Task+0xd0>)
 800084e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000852:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10c      	bne.n	8000874 <Dispatch_Next_Task+0x34>
	{
		idle_task.Task_State = RUNNING;
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <Dispatch_Next_Task+0xd4>)
 800085c:	2203      	movs	r2, #3
 800085e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		FIFO_enqueue(&Ready_Queue, &idle_task);
 8000862:	492c      	ldr	r1, [pc, #176]	; (8000914 <Dispatch_Next_Task+0xd4>)
 8000864:	4829      	ldr	r0, [pc, #164]	; (800090c <Dispatch_Next_Task+0xcc>)
 8000866:	f7ff fe69 	bl	800053c <FIFO_enqueue>
		MYRTOS_TCB.Next_Task = &idle_task;
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <Dispatch_Next_Task+0xd0>)
 800086c:	4a29      	ldr	r2, [pc, #164]	; (8000914 <Dispatch_Next_Task+0xd4>)
 800086e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8000872:	e049      	b.n	8000908 <Dispatch_Next_Task+0xc8>

	}else if((Ready_Queue.count == 0) && (MYRTOS_TCB.Current_Task->Task_State != SUSPEND))/* Ready Queue Is Empty and There is a Task Not Suspended */
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <Dispatch_Next_Task+0xcc>)
 8000876:	7b5b      	ldrb	r3, [r3, #13]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d11a      	bne.n	80008b2 <Dispatch_Next_Task+0x72>
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <Dispatch_Next_Task+0xd0>)
 800087e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000886:	2b00      	cmp	r3, #0
 8000888:	d013      	beq.n	80008b2 <Dispatch_Next_Task+0x72>
	{
		MYRTOS_TCB.Current_Task->Task_State = RUNNING;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <Dispatch_Next_Task+0xd0>)
 800088c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000890:	2203      	movs	r2, #3
 8000892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		FIFO_enqueue(&Ready_Queue, MYRTOS_TCB.Current_Task);
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <Dispatch_Next_Task+0xd0>)
 8000898:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	; (800090c <Dispatch_Next_Task+0xcc>)
 80008a0:	f7ff fe4c 	bl	800053c <FIFO_enqueue>
		MYRTOS_TCB.Next_Task = MYRTOS_TCB.Current_Task;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <Dispatch_Next_Task+0xd0>)
 80008a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008aa:	4a19      	ldr	r2, [pc, #100]	; (8000910 <Dispatch_Next_Task+0xd0>)
 80008ac:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
 80008b0:	e02a      	b.n	8000908 <Dispatch_Next_Task+0xc8>

	}else/* Ready Queue Is Not Empty */
	{
		FIFO_dequeue(&Ready_Queue, &MYRTOS_TCB.Next_Task);
 80008b2:	4919      	ldr	r1, [pc, #100]	; (8000918 <Dispatch_Next_Task+0xd8>)
 80008b4:	4815      	ldr	r0, [pc, #84]	; (800090c <Dispatch_Next_Task+0xcc>)
 80008b6:	f7ff fe83 	bl	80005c0 <FIFO_dequeue>
		MYRTOS_TCB.Next_Task->Task_State = RUNNING;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <Dispatch_Next_Task+0xd0>)
 80008bc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80008c0:	2203      	movs	r2, #3
 80008c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* Update Ready Queue (Round Robin) */
		if((MYRTOS_TCB.Current_Task->Task_Priority == MYRTOS_TCB.Next_Task->Task_Priority) && (MYRTOS_TCB.Current_Task->Task_State != SUSPEND))
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <Dispatch_Next_Task+0xd0>)
 80008c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008cc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <Dispatch_Next_Task+0xd0>)
 80008d2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80008d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008da:	429a      	cmp	r2, r3
 80008dc:	d114      	bne.n	8000908 <Dispatch_Next_Task+0xc8>
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <Dispatch_Next_Task+0xd0>)
 80008e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d00d      	beq.n	8000908 <Dispatch_Next_Task+0xc8>
		{
			FIFO_enqueue(&Ready_Queue, MYRTOS_TCB.Current_Task);
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <Dispatch_Next_Task+0xd0>)
 80008ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <Dispatch_Next_Task+0xcc>)
 80008f6:	f7ff fe21 	bl	800053c <FIFO_enqueue>
			MYRTOS_TCB.Current_Task->Task_State = READY;
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <Dispatch_Next_Task+0xd0>)
 80008fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000900:	2202      	movs	r2, #2
 8000902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		}

	}
}
 8000906:	e7ff      	b.n	8000908 <Dispatch_Next_Task+0xc8>
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000204 	.word	0x20000204
 8000910:	2000001c 	.word	0x2000001c
 8000914:	200003a8 	.word	0x200003a8
 8000918:	200001c0 	.word	0x200001c0

0800091c <SVC_services>:

void SVC_services(uint32_t* p_StackFrame)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	/* 	Stack -> R0 -> Argument0 = p_StackFrame */
	uint8_t SVC_serviceNumber;

	/* Access Address in PC [6] Then Read First Byte From [-2] To Get Service Number */
	SVC_serviceNumber = (((uint8_t*)p_StackFrame[6])[-2]);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3318      	adds	r3, #24
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3b02      	subs	r3, #2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	73fb      	strb	r3, [r7, #15]

	switch(SVC_serviceNumber)
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db1e      	blt.n	8000974 <SVC_services+0x58>
 8000936:	2b01      	cmp	r3, #1
 8000938:	dd02      	ble.n	8000940 <SVC_services+0x24>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d01c      	beq.n	8000978 <SVC_services+0x5c>

		break;
	case TASK_WAITING:
		break;
	default:
		break;
 800093e:	e019      	b.n	8000974 <SVC_services+0x58>
		Update_Scheduler();
 8000940:	f000 f892 	bl	8000a68 <Update_Scheduler>
		if(MYRTOS_TCB.RTOS_CurrentState == RTOS_RUNNING)
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <SVC_services+0x6c>)
 8000946:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800094a:	2b01      	cmp	r3, #1
 800094c:	d116      	bne.n	800097c <SVC_services+0x60>
			if(strcmp((sint8_t*)MYRTOS_TCB.Current_Task->Task_Name, "IDLE_TASK") != 0)
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <SVC_services+0x6c>)
 8000950:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000954:	490d      	ldr	r1, [pc, #52]	; (800098c <SVC_services+0x70>)
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fc0a 	bl	8000170 <strcmp>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00c      	beq.n	800097c <SVC_services+0x60>
				Dispatch_Next_Task();
 8000962:	f7ff ff6d 	bl	8000840 <Dispatch_Next_Task>
				Trigger_PendSV();
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <SVC_services+0x74>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <SVC_services+0x74>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6053      	str	r3, [r2, #4]
		break;
 8000972:	e003      	b.n	800097c <SVC_services+0x60>
		break;
 8000974:	bf00      	nop
 8000976:	e002      	b.n	800097e <SVC_services+0x62>
		break;
 8000978:	bf00      	nop
 800097a:	e000      	b.n	800097e <SVC_services+0x62>
		break;
 800097c:	bf00      	nop
	}

}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000001c 	.word	0x2000001c
 800098c:	08000f30 	.word	0x08000f30
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Set_MSP>:


void Set_MSP(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	/* Set Boundaries Of MSP  */
	MYRTOS_TCB._S_MSP = (uint32_t)&_estack;
 8000998:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <Set_MSP+0x34>)
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <Set_MSP+0x38>)
 800099c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	MYRTOS_TCB._E_MSP = (MYRTOS_TCB._S_MSP - MSP_SIZE);
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <Set_MSP+0x38>)
 80009a2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80009a6:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <Set_MSP+0x38>)
 80009ac:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	/* Set Start Of PSP, ALIGN(8)  */
	MYRTOS_TCB.PSP_Locator = (MYRTOS_TCB._E_MSP - 8);
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <Set_MSP+0x38>)
 80009b2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80009b6:	3b08      	subs	r3, #8
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <Set_MSP+0x38>)
 80009ba:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20005000 	.word	0x20005000
 80009cc:	2000001c 	.word	0x2000001c

080009d0 <IDLE_Task>:


void IDLE_Task(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTask_Led ^= 1; 
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <IDLE_Task+0x18>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f083 0301 	eor.w	r3, r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <IDLE_Task+0x18>)
 80009e0:	701a      	strb	r2, [r3, #0]
		NO_OPERATION();
 80009e2:	bf00      	nop
		IdleTask_Led ^= 1; 
 80009e4:	e7f6      	b.n	80009d4 <IDLE_Task+0x4>
 80009e6:	bf00      	nop
 80009e8:	200003a4 	.word	0x200003a4

080009ec <Create_Task_Stack>:
	}
}


void Create_Task_Stack(TASK_REF* task)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Assign PSP of Task To Begin of Stack */
	task->Task_Current_PSP = (uint32_t*) task->Task_S_PSP;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34

	/* Create Stack Frame */		/* Pushed By CPU : XPSR, PC, LR, R12, R3, R2, R1, R0
	  	  	  	  	  	  	  	  	   Pushed By Code : R4, R5, R6, R7, R9,R11				*/
	(task->Task_Current_PSP)--;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	1f1a      	subs	r2, r3, #4
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
	*(task->Task_Current_PSP) = 0x01000000; /* Push Dummy xPSR to Stack , Bit-24 Is Set Due To thumb */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a10:	601a      	str	r2, [r3, #0]

	(task->Task_Current_PSP)--;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	1f1a      	subs	r2, r3, #4
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34
	*(task->Task_Current_PSP) = (uint32_t) task->p_Task_Entery; /* Push PC to Stack */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a24:	601a      	str	r2, [r3, #0]

	(task->Task_Current_PSP)--;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2a:	1f1a      	subs	r2, r3, #4
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34
	*(task->Task_Current_PSP) = 0xFFFFFFFD; /* Push LR to Stack */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a34:	f06f 0202 	mvn.w	r2, #2
 8000a38:	601a      	str	r2, [r3, #0]

	for(i = 0; i < 13; i++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73fb      	strb	r3, [r7, #15]
 8000a3e:	e00b      	b.n	8000a58 <Create_Task_Stack+0x6c>
	{
		(task->Task_Current_PSP)--;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a44:	1f1a      	subs	r2, r3, #4
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	635a      	str	r2, [r3, #52]	; 0x34
		*(task->Task_Current_PSP) = 0x00000000; /* Push R0, R2, R3, ..., R12 to Stack */
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 13; i++)
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	3301      	adds	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b0c      	cmp	r3, #12
 8000a5c:	d9f0      	bls.n	8000a40 <Create_Task_Stack+0x54>
	}

}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <Update_Scheduler>:

void Update_Scheduler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]
	TASK_REF* temp = NULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
	TASK_REF* p_task;
	TASK_REF* p_nexttask;

	/* Sort The Tasks Based On The Priority */
	Bubble_Sort();
 8000a76:	f000 f85d 	bl	8000b34 <Bubble_Sort>

	/* Free The Ready Queue */
	while(FIFO_dequeue(&Ready_Queue, &temp) != FIFO_EMPTY);
 8000a7a:	bf00      	nop
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	482a      	ldr	r0, [pc, #168]	; (8000b2c <Update_Scheduler+0xc4>)
 8000a82:	f7ff fd9d 	bl	80005c0 <FIFO_dequeue>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d1f7      	bne.n	8000a7c <Update_Scheduler+0x14>

	/* Fill The Ready Queue */
	while(i < MYRTOS_TCB.Number_Of_Active_Tasks)
 8000a8c:	e041      	b.n	8000b12 <Update_Scheduler+0xaa>
	{
		p_task = MYRTOS_TCB.Task[i];
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <Update_Scheduler+0xc8>)
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	60bb      	str	r3, [r7, #8]
		p_nexttask = MYRTOS_TCB.Task[i+1];
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <Update_Scheduler+0xc8>)
 8000a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa2:	607b      	str	r3, [r7, #4]

		if(p_task->Task_State != SUSPEND)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d02e      	beq.n	8000b0c <Update_Scheduler+0xa4>
		{
			/* In Case Last Task in The Table */
			if(p_nexttask->Task_State == SUSPEND)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d108      	bne.n	8000aca <Update_Scheduler+0x62>
			{
				FIFO_enqueue(&Ready_Queue, p_task);
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	481c      	ldr	r0, [pc, #112]	; (8000b2c <Update_Scheduler+0xc4>)
 8000abc:	f7ff fd3e 	bl	800053c <FIFO_enqueue>
				p_task->Task_State = READY;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				break;
 8000ac8:	e02b      	b.n	8000b22 <Update_Scheduler+0xba>
			}

			/* Check Priority of Tasks Already Sorted */
			if(p_task->Task_Priority < p_nexttask->Task_Priority)
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d208      	bcs.n	8000aec <Update_Scheduler+0x84>
			{

				FIFO_enqueue(&Ready_Queue, p_task);
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <Update_Scheduler+0xc4>)
 8000ade:	f7ff fd2d 	bl	800053c <FIFO_enqueue>
				p_task->Task_State = READY;
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				break;
 8000aea:	e01a      	b.n	8000b22 <Update_Scheduler+0xba>

			}else if(p_task->Task_Priority == p_nexttask->Task_Priority)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d111      	bne.n	8000b20 <Update_Scheduler+0xb8>
			{
				FIFO_enqueue(&Ready_Queue, p_task);
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <Update_Scheduler+0xc4>)
 8000b00:	f7ff fd1c 	bl	800053c <FIFO_enqueue>
				p_task->Task_State = READY;
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2202      	movs	r2, #2
 8000b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				/* MISRA */
				break;
			}
		}

		i++;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
	while(i < MYRTOS_TCB.Number_Of_Active_Tasks)
 8000b12:	7bfa      	ldrb	r2, [r7, #15]
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <Update_Scheduler+0xc8>)
 8000b16:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d3b7      	bcc.n	8000a8e <Update_Scheduler+0x26>
	}
}
 8000b1e:	e000      	b.n	8000b22 <Update_Scheduler+0xba>
				break;
 8000b20:	bf00      	nop
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000204 	.word	0x20000204
 8000b30:	2000001c 	.word	0x2000001c

08000b34 <Bubble_Sort>:

void Bubble_Sort(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
	uint8_t i,j,n;
	TASK_REF* temp;

	n = MYRTOS_TCB.Number_Of_Active_Tasks;
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <Bubble_Sort+0x90>)
 8000b3c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000b40:	717b      	strb	r3, [r7, #5]

	for(i = 0; i < n - 1; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e032      	b.n	8000bae <Bubble_Sort+0x7a>
	{
		for(j = 0; j < n - i - 1; j++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	71bb      	strb	r3, [r7, #6]
 8000b4c:	e025      	b.n	8000b9a <Bubble_Sort+0x66>
		{
			/* Smaller Number Priority Is Higher Priority */
			if((MYRTOS_TCB.Task[j]->Task_Priority) > (MYRTOS_TCB.Task[j+1]->Task_Priority) )
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <Bubble_Sort+0x90>)
 8000b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b56:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000b5a:	79bb      	ldrb	r3, [r7, #6]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4919      	ldr	r1, [pc, #100]	; (8000bc4 <Bubble_Sort+0x90>)
 8000b60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d913      	bls.n	8000b94 <Bubble_Sort+0x60>
			{
				/* Swap Tasks */
				temp = MYRTOS_TCB.Task[j];
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <Bubble_Sort+0x90>)
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	603b      	str	r3, [r7, #0]
				MYRTOS_TCB.Task[j] = MYRTOS_TCB.Task[j+1];
 8000b76:	79bb      	ldrb	r3, [r7, #6]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	4911      	ldr	r1, [pc, #68]	; (8000bc4 <Bubble_Sort+0x90>)
 8000b7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b82:	4910      	ldr	r1, [pc, #64]	; (8000bc4 <Bubble_Sort+0x90>)
 8000b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				MYRTOS_TCB.Task[j+1] = temp;
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <Bubble_Sort+0x90>)
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j = 0; j < n - i - 1; j++)
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	3301      	adds	r3, #1
 8000b98:	71bb      	strb	r3, [r7, #6]
 8000b9a:	79ba      	ldrb	r2, [r7, #6]
 8000b9c:	7979      	ldrb	r1, [r7, #5]
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	1acb      	subs	r3, r1, r3
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbd2      	blt.n	8000b4e <Bubble_Sort+0x1a>
	for(i = 0; i < n - 1; i++)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	3301      	adds	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	797b      	ldrb	r3, [r7, #5]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbc7      	blt.n	8000b48 <Bubble_Sort+0x14>
			}
		}
	}
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	2000001c 	.word	0x2000001c

08000bc8 <MYRTOS_Init>:

/*===============================================================================
 *                         	   APIs Definitions 		   		                 *
 ================================================================================*/
RTOS_ERROR_STATE MYRTOS_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	RTOS_ERROR_STATE error_state = NO_ERROR;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	71fb      	strb	r3, [r7, #7]

	/* Set RTOS Mode To Suspend */
	MYRTOS_TCB.RTOS_CurrentState = RTOS_SUSPEND;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MYRTOS_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	/* Set Number of Active Task */
	MYRTOS_TCB.Number_Of_Active_Tasks = 0;
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MYRTOS_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

	/* Set MSP */
	Set_MSP();
 8000be2:	f7ff fed7 	bl	8000994 <Set_MSP>

	/* Create RTOS Ready FIFO */
	if(FIFO_init(&Ready_Queue, Ready_Queue_Buff, MAX_NO_OF_TASKS) != FIFO_NO_ERROR)
 8000be6:	2264      	movs	r2, #100	; 0x64
 8000be8:	4911      	ldr	r1, [pc, #68]	; (8000c30 <MYRTOS_Init+0x68>)
 8000bea:	4812      	ldr	r0, [pc, #72]	; (8000c34 <MYRTOS_Init+0x6c>)
 8000bec:	f7ff fc85 	bl	80004fa <FIFO_init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <MYRTOS_Init+0x34>
		error_state += READY_FIFO_INIT_ERROR;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	71fb      	strb	r3, [r7, #7]

	/* Set Idle Task */
	strcpy(idle_task.Task_Name,"IDLE_TASK");
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MYRTOS_Init+0x70>)
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <MYRTOS_Init+0x74>)
 8000c00:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c02:	c303      	stmia	r3!, {r0, r1}
 8000c04:	801a      	strh	r2, [r3, #0]
	idle_task.Task_StackSize = 256;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MYRTOS_Init+0x70>)
 8000c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c0c:	621a      	str	r2, [r3, #32]
	idle_task.Task_Priority = 100;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MYRTOS_Init+0x70>)
 8000c10:	2264      	movs	r2, #100	; 0x64
 8000c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	idle_task.p_Task_Entery = IDLE_Task;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MYRTOS_Init+0x70>)
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <MYRTOS_Init+0x78>)
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28

	MYRTOS_CreateTask(&idle_task);
 8000c1c:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MYRTOS_Init+0x70>)
 8000c1e:	f000 f84f 	bl	8000cc0 <MYRTOS_CreateTask>


	return error_state;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000001c 	.word	0x2000001c
 8000c30:	20000214 	.word	0x20000214
 8000c34:	20000204 	.word	0x20000204
 8000c38:	200003a8 	.word	0x200003a8
 8000c3c:	08000f30 	.word	0x08000f30
 8000c40:	080009d1 	.word	0x080009d1

08000c44 <MYRTOS_StartRTOS>:

RTOS_ERROR_STATE MYRTOS_StartRTOS(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	RTOS_ERROR_STATE error_state = NO_ERROR;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]

	/* Update RTOS State */
	MYRTOS_TCB.RTOS_CurrentState = RTOS_RUNNING;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MYRTOS_StartRTOS+0x74>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	/* Set Current Task To Idle */
	MYRTOS_TCB.Current_Task = &idle_task;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MYRTOS_StartRTOS+0x74>)
 8000c58:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <MYRTOS_StartRTOS+0x78>)
 8000c5a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	/* Activate Current Task */
	error_state += MYRTOS_ActivateTask(MYRTOS_TCB.Current_Task);
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MYRTOS_StartRTOS+0x74>)
 8000c60:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f85f 	bl	8000d28 <MYRTOS_ActivateTask>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4413      	add	r3, r2
 8000c72:	71fb      	strb	r3, [r7, #7]

	/* Start The Ticker */
	MyRTOS_StartTicker();
 8000c74:	f7ff fc39 	bl	80004ea <MyRTOS_StartTicker>

	/* Set PSP To Current Task */
	SET_PSP(MYRTOS_TCB.Current_Task->Task_Current_PSP);
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MYRTOS_StartRTOS+0x74>)
 8000c7a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c80:	f383 8809 	msr	PSP, r3

	/* Switch SP -> PSP */
	SET_SP_TO_PSP();
 8000c84:	f3ef 8014 	mrs	r0, CONTROL
 8000c88:	f04f 0102 	mov.w	r1, #2
 8000c8c:	ea40 0001 	orr.w	r0, r0, r1
 8000c90:	f380 8814 	msr	CONTROL, r0

	/* Switch To Unprivileged Access Level */
	UNPRIVILEGED_ACCESS_LEVEL();
 8000c94:	f3ef 8014 	mrs	r0, CONTROL
 8000c98:	f04f 0101 	mov.w	r1, #1
 8000c9c:	ea40 0001 	orr.w	r0, r0, r1
 8000ca0:	f380 8814 	msr	CONTROL, r0

	/* Set Task Entry */
	MYRTOS_TCB.Current_Task->p_Task_Entery();
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <MYRTOS_StartRTOS+0x74>)
 8000ca6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	4798      	blx	r3

	return error_state;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2000001c 	.word	0x2000001c
 8000cbc:	200003a8 	.word	0x200003a8

08000cc0 <MYRTOS_CreateTask>:


RTOS_ERROR_STATE MYRTOS_CreateTask(TASK_REF* task)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	RTOS_ERROR_STATE error_state = NO_ERROR;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]

	/* Set Boundaries PSP */
	task->Task_S_PSP = MYRTOS_TCB.PSP_Locator;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MYRTOS_CreateTask+0x64>)
 8000cce:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
	task->Task_E_PSP = task->Task_S_PSP - task->Task_StackSize;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1b      	ldr	r3, [r3, #32]
 8000cde:	1ad2      	subs	r2, r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set PSP Locator, ALIGN(8)  */
	MYRTOS_TCB.PSP_Locator = task->Task_E_PSP - 8;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	3b08      	subs	r3, #8
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <MYRTOS_CreateTask+0x64>)
 8000cec:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	//	/* Check Boundaries of Stack */
	//	if(task->Task_E_PSP < ((uint32_t)&_eheap))
	//		return TASK_EXCEED_STACK_BAOUNDARIES;

	/* Create Stack of Task */
	Create_Task_Stack(task);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fe7b 	bl	80009ec <Create_Task_Stack>

	/* Assign Task To TCB */
	MYRTOS_TCB.Task[MYRTOS_TCB.Number_Of_Active_Tasks] = task;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MYRTOS_CreateTask+0x64>)
 8000cf8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000cfc:	4909      	ldr	r1, [pc, #36]	; (8000d24 <MYRTOS_CreateTask+0x64>)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	(MYRTOS_TCB.Number_Of_Active_Tasks)++;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MYRTOS_CreateTask+0x64>)
 8000d06:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <MYRTOS_CreateTask+0x64>)
 8000d0e:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	/* Set Task State To Suspended */
	task->Task_State = SUSPEND;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


	return error_state;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000001c 	.word	0x2000001c

08000d28 <MYRTOS_ActivateTask>:


RTOS_ERROR_STATE MYRTOS_ActivateTask(TASK_REF* task)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	RTOS_ERROR_STATE error_state = NO_ERROR;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]

	/* Set Task State To Waiting */
	task->Task_State = WAITING;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	/* Call SVC Exception */
	SVC_SET(ACTIVATE_TASK);
 8000d3c:	df00      	svc	0

	return error_state;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <Task3_Fun>:

/*===============================================================================
 *                                Application                                    *
 ================================================================================*/
void Task3_Fun(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task3_Led ^= 1;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <Task3_Fun+0x14>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	f083 0301 	eor.w	r3, r3, #1
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b01      	ldr	r3, [pc, #4]	; (8000d60 <Task3_Fun+0x14>)
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e7f7      	b.n	8000d50 <Task3_Fun+0x4>
 8000d60:	20000479 	.word	0x20000479

08000d64 <Task2_Fun>:
	}
}

void Task2_Fun(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Led ^= 1;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <Task2_Fun+0x14>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f083 0301 	eor.w	r3, r3, #1
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b01      	ldr	r3, [pc, #4]	; (8000d78 <Task2_Fun+0x14>)
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e7f7      	b.n	8000d68 <Task2_Fun+0x4>
 8000d78:	2000047a 	.word	0x2000047a

08000d7c <Task1_Fun>:
	}
}

void Task1_Fun(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_Led ^= 1;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <Task1_Fun+0x14>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	f083 0301 	eor.w	r3, r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b01      	ldr	r3, [pc, #4]	; (8000d90 <Task1_Fun+0x14>)
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	e7f7      	b.n	8000d80 <Task1_Fun+0x4>
 8000d90:	20000478 	.word	0x20000478

08000d94 <System_Init>:
	}
}

void System_Init(void)
{	
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

	/* Initialize HardWare */
	MyRTOS_HW_Init();
 8000d98:	f7ff fb9c 	bl	80004d4 <MyRTOS_HW_Init>

	/* Initialize The RTOS */
	MYRTOS_Init();
 8000d9c:	f7ff ff14 	bl	8000bc8 <MYRTOS_Init>

	/* Initialize The Tasks */

	strcpy(task1.Task_Name,"TASK_1");
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <System_Init+0xb8>)
 8000da2:	4a2b      	ldr	r2, [pc, #172]	; (8000e50 <System_Init+0xbc>)
 8000da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da8:	6018      	str	r0, [r3, #0]
 8000daa:	3304      	adds	r3, #4
 8000dac:	8019      	strh	r1, [r3, #0]
 8000dae:	3302      	adds	r3, #2
 8000db0:	0c0a      	lsrs	r2, r1, #16
 8000db2:	701a      	strb	r2, [r3, #0]
	task1.Task_StackSize = 512;
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <System_Init+0xb8>)
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	621a      	str	r2, [r3, #32]
	task1.Task_Priority = 1;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <System_Init+0xb8>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	task1.p_Task_Entery = Task1_Fun;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <System_Init+0xb8>)
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <System_Init+0xc0>)
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
	MYRTOS_CreateTask(&task1);
 8000dca:	4820      	ldr	r0, [pc, #128]	; (8000e4c <System_Init+0xb8>)
 8000dcc:	f7ff ff78 	bl	8000cc0 <MYRTOS_CreateTask>

	strcpy(task2.Task_Name,"TASK_2");
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <System_Init+0xc4>)
 8000dd2:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <System_Init+0xc8>)
 8000dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dd8:	6018      	str	r0, [r3, #0]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	8019      	strh	r1, [r3, #0]
 8000dde:	3302      	adds	r3, #2
 8000de0:	0c0a      	lsrs	r2, r1, #16
 8000de2:	701a      	strb	r2, [r3, #0]
	task2.Task_StackSize = 512;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <System_Init+0xc4>)
 8000de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dea:	621a      	str	r2, [r3, #32]
	task2.Task_Priority = 1;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <System_Init+0xc4>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	task2.p_Task_Entery = Task2_Fun;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <System_Init+0xc4>)
 8000df6:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <System_Init+0xcc>)
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
	MYRTOS_CreateTask(&task2);
 8000dfa:	4817      	ldr	r0, [pc, #92]	; (8000e58 <System_Init+0xc4>)
 8000dfc:	f7ff ff60 	bl	8000cc0 <MYRTOS_CreateTask>

	strcpy(task3.Task_Name,"TASK_3");
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <System_Init+0xd0>)
 8000e02:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <System_Init+0xd4>)
 8000e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e08:	6018      	str	r0, [r3, #0]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	8019      	strh	r1, [r3, #0]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	0c0a      	lsrs	r2, r1, #16
 8000e12:	701a      	strb	r2, [r3, #0]
	task3.Task_StackSize = 512;
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <System_Init+0xd0>)
 8000e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1a:	621a      	str	r2, [r3, #32]
	task3.Task_Priority = 1;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <System_Init+0xd0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	task3.p_Task_Entery = Task3_Fun;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <System_Init+0xd0>)
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <System_Init+0xd8>)
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
	MYRTOS_CreateTask(&task3);
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <System_Init+0xd0>)
 8000e2c:	f7ff ff48 	bl	8000cc0 <MYRTOS_CreateTask>

	MYRTOS_ActivateTask(&task1);
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <System_Init+0xb8>)
 8000e32:	f7ff ff79 	bl	8000d28 <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&task2);
 8000e36:	4808      	ldr	r0, [pc, #32]	; (8000e58 <System_Init+0xc4>)
 8000e38:	f7ff ff76 	bl	8000d28 <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&task3);
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <System_Init+0xd0>)
 8000e3e:	f7ff ff73 	bl	8000d28 <MYRTOS_ActivateTask>



	MYRTOS_StartRTOS();
 8000e42:	f7ff feff 	bl	8000c44 <MYRTOS_StartRTOS>

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200003f0 	.word	0x200003f0
 8000e50:	08000f3c 	.word	0x08000f3c
 8000e54:	08000d7d 	.word	0x08000d7d
 8000e58:	20000434 	.word	0x20000434
 8000e5c:	08000f44 	.word	0x08000f44
 8000e60:	08000d65 	.word	0x08000d65
 8000e64:	2000047c 	.word	0x2000047c
 8000e68:	08000f4c 	.word	0x08000f4c
 8000e6c:	08000d4d 	.word	0x08000d4d

08000e70 <main>:



int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	/* Function To Initiate The System (RTOS,HW,RCC) */
	System_Init();
 8000e74:	f7ff ff8e 	bl	8000d94 <System_Init>

	while(1)
 8000e78:	e7fe      	b.n	8000e78 <main+0x8>
	...

08000e7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e7e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e80:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	; (8000ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eaa:	f000 f811 	bl	8000ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eae:	f7ff ffdf 	bl	8000e70 <main>

08000eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb2:	e7fe      	b.n	8000eb2 <LoopForever>
  ldr   r0, =_estack
 8000eb4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ec0:	08000f5c 	.word	0x08000f5c
  ldr r2, =_sbss
 8000ec4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ec8:	200004c0 	.word	0x200004c0

08000ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC1_2_IRQHandler>
	...

08000ed0 <__libc_init_array>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	2500      	movs	r5, #0
 8000ed4:	4e0c      	ldr	r6, [pc, #48]	; (8000f08 <__libc_init_array+0x38>)
 8000ed6:	4c0d      	ldr	r4, [pc, #52]	; (8000f0c <__libc_init_array+0x3c>)
 8000ed8:	1ba4      	subs	r4, r4, r6
 8000eda:	10a4      	asrs	r4, r4, #2
 8000edc:	42a5      	cmp	r5, r4
 8000ede:	d109      	bne.n	8000ef4 <__libc_init_array+0x24>
 8000ee0:	f000 f81a 	bl	8000f18 <_init>
 8000ee4:	2500      	movs	r5, #0
 8000ee6:	4e0a      	ldr	r6, [pc, #40]	; (8000f10 <__libc_init_array+0x40>)
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	; (8000f14 <__libc_init_array+0x44>)
 8000eea:	1ba4      	subs	r4, r4, r6
 8000eec:	10a4      	asrs	r4, r4, #2
 8000eee:	42a5      	cmp	r5, r4
 8000ef0:	d105      	bne.n	8000efe <__libc_init_array+0x2e>
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ef8:	4798      	blx	r3
 8000efa:	3501      	adds	r5, #1
 8000efc:	e7ee      	b.n	8000edc <__libc_init_array+0xc>
 8000efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f02:	4798      	blx	r3
 8000f04:	3501      	adds	r5, #1
 8000f06:	e7f2      	b.n	8000eee <__libc_init_array+0x1e>
 8000f08:	08000f54 	.word	0x08000f54
 8000f0c:	08000f54 	.word	0x08000f54
 8000f10:	08000f54 	.word	0x08000f54
 8000f14:	08000f58 	.word	0x08000f58

08000f18 <_init>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr

08000f24 <_fini>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr
