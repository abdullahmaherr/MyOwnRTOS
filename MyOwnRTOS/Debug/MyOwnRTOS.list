
MyOwnRTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ed8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001008  08001008  00011008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800102c  0800102c  00011034  2**0
                  CONTENTS
  4 .ARM          00000000  0800102c  0800102c  00011034  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800102c  08001034  00011034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800102c  0800102c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001030  08001030  00011030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000000  08001034  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08001034  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049bd  00000000  00000000  0001105d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b62  00000000  00000000  00015a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000cf8  00000000  00000000  0001657c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000260  00000000  00000000  00017278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f8  00000000  00000000  000174d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003092  00000000  00000000  000176d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002a06  00000000  00000000  0001a762  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00011870  00000000  00000000  0001d168  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002e9d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000748  00000000  00000000  0002ea54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ff0 	.word	0x08000ff0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ff0 	.word	0x08000ff0

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <EXTI0_IRQHandler>:
/*===============================================================================
 *                       		 ISR Functions  		                         *
 ================================================================================*/

void EXTI0_IRQHandler(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI0);
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018a:	695b      	ldr	r3, [r3, #20]
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018e:	f043 0301 	orr.w	r3, r3, #1
 8000192:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[0])();
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI0_IRQHandler+0x20>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010400 	.word	0x40010400
 80001a4:	200001c8 	.word	0x200001c8

080001a8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI1);
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[1])();
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <EXTI1_IRQHandler+0x20>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4798      	blx	r3
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010400 	.word	0x40010400
 80001c8:	200001c8 	.word	0x200001c8

080001cc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI2);
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d2:	695b      	ldr	r3, [r3, #20]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[2])();
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <EXTI2_IRQHandler+0x20>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4798      	blx	r3
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010400 	.word	0x40010400
 80001ec:	200001c8 	.word	0x200001c8

080001f0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI3);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[3])();
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <EXTI3_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010400 	.word	0x40010400
 8000210:	200001c8 	.word	0x200001c8

08000214 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI4);
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[4])();
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI4_IRQHandler+0x20>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	4798      	blx	r3
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	200001c8 	.word	0x200001c8

08000238 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI5))
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0320 	and.w	r3, r3, #32
 8000244:	2b00      	cmp	r3, #0
 8000246:	d009      	beq.n	800025c <EXTI9_5_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI5);
 8000248:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a24      	ldr	r2, [pc, #144]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[5])();
 8000254:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI9);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[9])();
	}
}
 800025a:	e03e      	b.n	80002da <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI6))
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000264:	2b00      	cmp	r3, #0
 8000266:	d009      	beq.n	800027c <EXTI9_5_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI6);
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a1c      	ldr	r2, [pc, #112]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800026e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000272:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[6])();
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4798      	blx	r3
}
 800027a:	e02e      	b.n	80002da <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI7))
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000284:	2b00      	cmp	r3, #0
 8000286:	d009      	beq.n	800029c <EXTI9_5_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI7);
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800028e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000292:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[7])();
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 8000296:	69db      	ldr	r3, [r3, #28]
 8000298:	4798      	blx	r3
}
 800029a:	e01e      	b.n	80002da <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI8))
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d009      	beq.n	80002bc <EXTI9_5_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI8);
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b2:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[8])();
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4798      	blx	r3
}
 80002ba:	e00e      	b.n	80002da <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI9))
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d008      	beq.n	80002da <EXTI9_5_IRQHandler+0xa2>
		SET_BIT(EXTI->PR,EXTI9);
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <EXTI9_5_IRQHandler+0xa8>)
 80002ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d2:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[9])();
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <EXTI9_5_IRQHandler+0xac>)
 80002d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d8:	4798      	blx	r3
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010400 	.word	0x40010400
 80002e4:	200001c8 	.word	0x200001c8

080002e8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI10))
 80002ec:	4b30      	ldr	r3, [pc, #192]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d009      	beq.n	800030c <EXTI15_10_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI10);
 80002f8:	4b2d      	ldr	r3, [pc, #180]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a2c      	ldr	r2, [pc, #176]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 80002fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000302:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[10])();
 8000304:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000308:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI15);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[15])();
	}
}
 800030a:	e04e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI11))
 800030c:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000314:	2b00      	cmp	r3, #0
 8000316:	d009      	beq.n	800032c <EXTI15_10_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI11);
 8000318:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a24      	ldr	r2, [pc, #144]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800031e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000322:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[11])();
 8000324:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000328:	4798      	blx	r3
}
 800032a:	e03e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI12))
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000334:	2b00      	cmp	r3, #0
 8000336:	d009      	beq.n	800034c <EXTI15_10_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI12);
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800033e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000342:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[12])();
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4798      	blx	r3
}
 800034a:	e02e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI13))
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000354:	2b00      	cmp	r3, #0
 8000356:	d009      	beq.n	800036c <EXTI15_10_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI13);
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800035e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000362:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[13])();
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000368:	4798      	blx	r3
}
 800036a:	e01e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI14))
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000374:	2b00      	cmp	r3, #0
 8000376:	d009      	beq.n	800038c <EXTI15_10_IRQHandler+0xa4>
		SET_BIT(EXTI->PR,EXTI14);
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800037e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000382:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[14])();
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 8000386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000388:	4798      	blx	r3
}
 800038a:	e00e      	b.n	80003aa <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI15))
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d008      	beq.n	80003aa <EXTI15_10_IRQHandler+0xc2>
		SET_BIT(EXTI->PR,EXTI15);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <EXTI15_10_IRQHandler+0xc8>)
 800039e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003a2:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[15])();
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <EXTI15_10_IRQHandler+0xcc>)
 80003a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003a8:	4798      	blx	r3
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40010400 	.word	0x40010400
 80003b4:	200001c8 	.word	0x200001c8

080003b8 <MCAL_RCC_initSYSClk>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void MCAL_RCC_initSYSClk(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	/* Clear Default Value For Control Register */
	CLEAR_BIT((RCC->CR),0);
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003c2:	f023 0301 	bic.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

	/* System Clock Switch*/
	RCC->CFGR |= SYS_CLK_SRC;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	6053      	str	r3, [r2, #4]

	/* AHB Prescaler */
	(RCC->CFGR) |= AHB_CLK_PRESCALER;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	6053      	str	r3, [r2, #4]

	/* APB1 Prescaler */
	(RCC->CFGR) |= (APB_LOW_CLK_PRESCALER<<8);
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	6053      	str	r3, [r2, #4]

	/* APB2 Prescaler */
	(RCC->CFGR) |= (APB_HIGH_CLK_PRESCALER<<11);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	6053      	str	r3, [r2, #4]

#if SYS_CLK_SRC == RCC_HSI_CLK

	/* Internal High-Speed Clock Enable */
	SET_BIT((RCC->CR),0);
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a03      	ldr	r2, [pc, #12]	; (80003fc <MCAL_RCC_initSYSClk+0x44>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6013      	str	r3, [r2, #0]

#error("Your SYSCLK Is False")

#endif

}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000

08000400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	6039      	str	r1, [r7, #0]
 800040a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800040c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	db0a      	blt.n	800042a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	b2da      	uxtb	r2, r3
 8000418:	490c      	ldr	r1, [pc, #48]	; (800044c <__NVIC_SetPriority+0x4c>)
 800041a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800041e:	0152      	lsls	r2, r2, #5
 8000420:	b2d2      	uxtb	r2, r2
 8000422:	440b      	add	r3, r1
 8000424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000428:	e00a      	b.n	8000440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4908      	ldr	r1, [pc, #32]	; (8000450 <__NVIC_SetPriority+0x50>)
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	f003 030f 	and.w	r3, r3, #15
 8000436:	3b04      	subs	r3, #4
 8000438:	0152      	lsls	r2, r2, #5
 800043a:	b2d2      	uxtb	r2, r2
 800043c:	440b      	add	r3, r1
 800043e:	761a      	strb	r2, [r3, #24]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	e000e100 	.word	0xe000e100
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000464:	d301      	bcc.n	800046a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000466:	2301      	movs	r3, #1
 8000468:	e00f      	b.n	800048a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <SysTick_Config+0x40>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3b01      	subs	r3, #1
 8000470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000472:	2107      	movs	r1, #7
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	f7ff ffc2 	bl	8000400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <SysTick_Config+0x40>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SysTick_Config+0x40>)
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	e000e010 	.word	0xe000e010

08000498 <SysTick_Handler>:
/*===============================================================================
 *     		       		 	Exception Handlers Definition 	                     *
 ================================================================================*/
__attribute((naked)) void SysTick_Handler(void)
{
	__asm volatile(" B SysTick_ISR ");
 8000498:	f000 b916 	b.w	80006c8 <SysTick_ISR>

}
 800049c:	bf00      	nop

0800049e <PendSV_Handler>:

__attribute((naked)) void PendSV_Handler(void)
{
	__asm volatile( "B PendSV_ContextSwitch" );
 800049e:	f000 b92d 	b.w	80006fc <PendSV_ContextSwitch>
}
 80004a2:	bf00      	nop

080004a4 <SVC_Handler>:

__attribute((naked)) void SVC_Handler(void)
{
	__asm volatile(	"TST LR, #4		\n\t"
 80004a4:	f01e 0f04 	tst.w	lr, #4
 80004a8:	bf0c      	ite	eq
 80004aa:	f3ef 8008 	mrseq	r0, MSP
 80004ae:	f3ef 8009 	mrsne	r0, PSP
 80004b2:	f000 ba71 	b.w	8000998 <SVC_services>
					"ITE EQ			\n\t"
					"MRSEQ R0,MSP	\n\t"
					"MRSNE R0,PSP	\n\t"
					"B SVC_services"
	);
}
 80004b6:	bf00      	nop

080004b8 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	while(1);
 80004bc:	e7fe      	b.n	80004bc <HardFault_Handler+0x4>

080004be <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
	while(1);
 80004c2:	e7fe      	b.n	80004c2 <MemManage_Handler+0x4>

080004c4 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	while(1);
 80004c8:	e7fe      	b.n	80004c8 <BusFault_Handler+0x4>

080004ca <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
	while(1);
 80004ce:	e7fe      	b.n	80004ce <UsageFault_Handler+0x4>

080004d0 <MyRTOS_HW_Init>:
/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/

void MyRTOS_HW_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	/* Initialize RCC (SysTick Timer & CPU) */

	/* Initialize System Clock  */
	MCAL_RCC_initSYSClk();
 80004d4:	f7ff ff70 	bl	80003b8 <MCAL_RCC_initSYSClk>

	/* Initialize PendSV Priority */
	__NVIC_SetPriority(PendSV_IRQn,15);
 80004d8:	210f      	movs	r1, #15
 80004da:	f06f 0001 	mvn.w	r0, #1
 80004de:	f7ff ff8f 	bl	8000400 <__NVIC_SetPriority>

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <MyRTOS_StartTicker>:

void MyRTOS_StartTicker(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
	/* For F = 8 Mh , T = 0.125 us , 1s -> 8000 Ticks */
	SysTick_Config(8000);
 80004ea:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80004ee:	f7ff ffb1 	bl	8000454 <SysTick_Config>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <FIFO_init>:

/*
 * Description : Function To Initializing FIFO
 * */
FIFO_STATE FIFO_init(FIFO_t *fifo, DATA_TYPE_t *buff, uint8_t length)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b085      	sub	sp, #20
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	60f8      	str	r0, [r7, #12]
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	4613      	mov	r3, r2
 8000502:	71fb      	strb	r3, [r7, #7]
	/* FIFO Is NULL */
	if(buff == NULL_PTR)
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d101      	bne.n	800050e <FIFO_init+0x18>
	{
		return 	FIFO_NULL;
 800050a:	2304      	movs	r3, #4
 800050c:	e00f      	b.n	800052e <FIFO_init+0x38>
	}

	/* Assign FIFO */
	fifo->base = buff;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	68ba      	ldr	r2, [r7, #8]
 8000512:	601a      	str	r2, [r3, #0]
	fifo->head = buff;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	605a      	str	r2, [r3, #4]
	fifo->tail = buff;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	68ba      	ldr	r2, [r7, #8]
 800051e:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	79fa      	ldrb	r2, [r7, #7]
 8000524:	731a      	strb	r2, [r3, #12]
	fifo->count = 0;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	2200      	movs	r2, #0
 800052a:	735a      	strb	r2, [r3, #13]


	return FIFO_NO_ERROR;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <FIFO_enqueue>:

/*
 * Description : Function To Add Element in FIFO
 * */
FIFO_STATE FIFO_enqueue(FIFO_t *fifo, DATA_TYPE_t item)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	/* FIFO Is NULL */
	if(!(fifo->base) || !(fifo->head) || !(fifo->tail))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d007      	beq.n	800055a <FIFO_enqueue+0x22>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d003      	beq.n	800055a <FIFO_enqueue+0x22>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d101      	bne.n	800055e <FIFO_enqueue+0x26>
	{
		return 	FIFO_NULL;
 800055a:	2304      	movs	r3, #4
 800055c:	e029      	b.n	80005b2 <FIFO_enqueue+0x7a>
	}

	/* FIFO Is FULL */
	if(fifo->count == fifo->length)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7b5a      	ldrb	r2, [r3, #13]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7b1b      	ldrb	r3, [r3, #12]
 8000566:	429a      	cmp	r2, r3
 8000568:	d101      	bne.n	800056e <FIFO_enqueue+0x36>
	{
		return FIFO_FULL;
 800056a:	2301      	movs	r3, #1
 800056c:	e021      	b.n	80005b2 <FIFO_enqueue+0x7a>
	}

	/* Add Item To FIFO */
	*(fifo->tail) = item;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	601a      	str	r2, [r3, #0]
	fifo->count++;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7b5b      	ldrb	r3, [r3, #13]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	735a      	strb	r2, [r3, #13]

	/* Circular Buffer */
	if((uint32_t)fifo->tail == ((uint32_t)fifo->base + (4 * fifo->length) - 4))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	461a      	mov	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7b1b      	ldrb	r3, [r3, #12]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	3b04      	subs	r3, #4
 8000598:	429a      	cmp	r2, r3
 800059a:	d104      	bne.n	80005a6 <FIFO_enqueue+0x6e>
	{
		fifo->tail = fifo->base;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	e004      	b.n	80005b0 <FIFO_enqueue+0x78>
	}
	else
	{
		fifo->tail++;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	1d1a      	adds	r2, r3, #4
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	609a      	str	r2, [r3, #8]
	}

	return FIFO_NO_ERROR;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <FIFO_dequeue>:

/*
 * Description : Function To Remove Element From FIFO
 * */
FIFO_STATE FIFO_dequeue(FIFO_t* fifo, DATA_TYPE_t* item)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	/* FIFO Is NULL */
	if(!(fifo->base) || !(fifo->head) || !(fifo->tail))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d007      	beq.n	80005de <FIFO_dequeue+0x22>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d003      	beq.n	80005de <FIFO_dequeue+0x22>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <FIFO_dequeue+0x26>
	{
		return 	FIFO_NULL;
 80005de:	2304      	movs	r3, #4
 80005e0:	e028      	b.n	8000634 <FIFO_dequeue+0x78>
	}

	/* FIFO Is Empty; */
	if(fifo->count == 0)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7b5b      	ldrb	r3, [r3, #13]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d101      	bne.n	80005ee <FIFO_dequeue+0x32>
	{
		return FIFO_EMPTY;
 80005ea:	2303      	movs	r3, #3
 80005ec:	e022      	b.n	8000634 <FIFO_dequeue+0x78>
	}

	/* Remove Item From FIFO */
	*item = *(fifo->head);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	601a      	str	r2, [r3, #0]
	fifo->count--;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7b5b      	ldrb	r3, [r3, #13]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	735a      	strb	r2, [r3, #13]

	/* Circular Buffer */
	if((uint32_t)fifo->head == ((uint32_t)fifo->base + (4 * fifo->length) - 4))
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	461a      	mov	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4619      	mov	r1, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7b1b      	ldrb	r3, [r3, #12]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	3b04      	subs	r3, #4
 800061a:	429a      	cmp	r2, r3
 800061c:	d104      	bne.n	8000628 <FIFO_dequeue+0x6c>
	{
		fifo->head = fifo->base;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	e004      	b.n	8000632 <FIFO_dequeue+0x76>
	}
	else
	{
		fifo->head++;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	1d1a      	adds	r2, r3, #4
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	605a      	str	r2, [r3, #4]
	}


	return FIFO_NO_ERROR;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
	...

08000640 <Update_Waiting_Time>:
/*===============================================================================
 *                        Private Functions Definitions  		   	             *
 ================================================================================*/

void Update_Waiting_Time(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
	uint32_t i;

	/* For Every Ticks Count Decrement The Blocking Ticks Count For The Blocked Tasks */
	for(i = 0; i < MYRTOS_TCB.Number_Of_Active_Tasks; i++)
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e02f      	b.n	80006ac <Update_Waiting_Time+0x6c>
	{
		if(MYRTOS_TCB.Task[i]->Task_State == SUSPEND)
 800064c:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <Update_Waiting_Time+0x84>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000654:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000658:	2b00      	cmp	r3, #0
 800065a:	d124      	bne.n	80006a6 <Update_Waiting_Time+0x66>
		{
			if(MYRTOS_TCB.Task[i]->Task_WaitingTime.Task_Bloking == BLOCKING_ENABLED)
 800065c:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <Update_Waiting_Time+0x84>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000668:	2b01      	cmp	r3, #1
 800066a:	d11c      	bne.n	80006a6 <Update_Waiting_Time+0x66>
			{
				/* Decrement The Blocking Ticks Count */
				(MYRTOS_TCB.Task[i]->Task_WaitingTime.Task_WaitingTicsCount)--;
 800066c:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <Update_Waiting_Time+0x84>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000676:	3a01      	subs	r2, #1
 8000678:	641a      	str	r2, [r3, #64]	; 0x40

				if(MYRTOS_TCB.Task[i]->Task_WaitingTime.Task_WaitingTicsCount == 0)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <Update_Waiting_Time+0x84>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	2b00      	cmp	r3, #0
 8000686:	d10e      	bne.n	80006a6 <Update_Waiting_Time+0x66>
				{
					/* Disable The Blocking of The Task */
					MYRTOS_TCB.Task[i]->Task_WaitingTime.Task_Bloking = BLOCKING_DISABLED;
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <Update_Waiting_Time+0x84>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000690:	2200      	movs	r2, #0
 8000692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					MYRTOS_TCB.Task[i]->Task_State = WAITING;
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <Update_Waiting_Time+0x84>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	2201      	movs	r2, #1
 80006a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

					SVC_SET(TASK_WAITING);
 80006a4:	df02      	svc	2
	for(i = 0; i < MYRTOS_TCB.Number_Of_Active_Tasks; i++)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3301      	adds	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <Update_Waiting_Time+0x84>)
 80006ae:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d3c9      	bcc.n	800064c <Update_Waiting_Time+0xc>
				}
			}

		}
	}
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	2000001c 	.word	0x2000001c

080006c8 <SysTick_ISR>:

void SysTick_ISR(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	SysTick_Led ^= 1;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <SysTick_ISR+0x2c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f083 0301 	eor.w	r3, r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <SysTick_ISR+0x2c>)
 80006d8:	701a      	strb	r2, [r3, #0]

	/* Update Blocking Ticks Count For Blocked Tasks */
	Update_Waiting_Time();
 80006da:	f7ff ffb1 	bl	8000640 <Update_Waiting_Time>

	/* Decide What Next */
	Dispatch_Next_Task();
 80006de:	f000 f8ed 	bl	80008bc <Dispatch_Next_Task>

	/* Trigger PendSV */
	Trigger_PendSV();
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <SysTick_ISR+0x30>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <SysTick_ISR+0x30>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6053      	str	r3, [r2, #4]
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200003ec 	.word	0x200003ec
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <PendSV_ContextSwitch>:

__attribute((naked)) void PendSV_ContextSwitch(void)
{
	/* Get PSP Address */
	GET_PSP(MYRTOS_TCB.Current_Task->Task_Current_PSP);
 80006fc:	4b6e      	ldr	r3, [pc, #440]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80006fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000702:	f3ef 8009 	mrs	r0, PSP
 8000706:	4602      	mov	r2, r0
 8000708:	635a      	str	r2, [r3, #52]	; 0x34

	/* Context Switch */

	/* PUSH R4 To R11 of Current Task */
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 800070a:	4b6b      	ldr	r3, [pc, #428]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800070c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000712:	3a04      	subs	r2, #4
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R4" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000716:	4b68      	ldr	r3, [pc, #416]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000718:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800071c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071e:	4622      	mov	r2, r4
 8000720:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 8000722:	4b65      	ldr	r3, [pc, #404]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000724:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072a:	3a04      	subs	r2, #4
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R5" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 800072e:	4b62      	ldr	r3, [pc, #392]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000730:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000736:	462a      	mov	r2, r5
 8000738:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 800073a:	4b5f      	ldr	r3, [pc, #380]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800073c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000742:	3a04      	subs	r2, #4
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R6" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000746:	4b5c      	ldr	r3, [pc, #368]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000748:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800074c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800074e:	4632      	mov	r2, r6
 8000750:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 8000752:	4b59      	ldr	r3, [pc, #356]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000754:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800075a:	3a04      	subs	r2, #4
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R7" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 800075e:	4b56      	ldr	r3, [pc, #344]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000760:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000766:	463a      	mov	r2, r7
 8000768:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 800076a:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800076c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000772:	3a04      	subs	r2, #4
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R8" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000778:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800077c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800077e:	4642      	mov	r2, r8
 8000780:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 8000782:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000784:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800078a:	3a04      	subs	r2, #4
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R9" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 800078e:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000790:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000796:	464a      	mov	r2, r9
 8000798:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 800079a:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800079c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007a2:	3a04      	subs	r2, #4
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R10" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80007a6:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80007a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ae:	4652      	mov	r2, sl
 80007b0:	601a      	str	r2, [r3, #0]
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)--;
 80007b2:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80007b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ba:	3a04      	subs	r2, #4
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %[out0],R11" : [out0] "=r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80007be:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80007c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c6:	465a      	mov	r2, fp
 80007c8:	601a      	str	r2, [r3, #0]


	/* Switch To Next Task */
	if(MYRTOS_TCB.Next_Task != NULL)
 80007ca:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80007cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <PendSV_ContextSwitch+0xec>
	{
		MYRTOS_TCB.Current_Task = MYRTOS_TCB.Next_Task;
 80007d4:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80007d6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007da:	4a37      	ldr	r2, [pc, #220]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80007dc:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		MYRTOS_TCB.Next_Task = NULL;
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4


	/* Context Restore */

	/* POP R11 To R4 of Next Task */
	__asm volatile("MOV R11,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 80007e8:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80007ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	469b      	mov	fp, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80007f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fc:	3204      	adds	r2, #4
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R10,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000800:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000802:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	469a      	mov	sl, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800080e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000814:	3204      	adds	r2, #4
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R9,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800081a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800081e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4699      	mov	r9, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000826:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800082a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082c:	3204      	adds	r2, #4
 800082e:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R8,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000832:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4698      	mov	r8, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800083e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000844:	3204      	adds	r2, #4
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R7,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800084a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800084e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	461f      	mov	r7, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000856:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800085a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085c:	3204      	adds	r2, #4
 800085e:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R6,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000862:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	461e      	mov	r6, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800086e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000874:	3204      	adds	r2, #4
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R5,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800087a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800087e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	461d      	mov	r5, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000886:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800088a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088c:	3204      	adds	r2, #4
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV R4,%[in0]" :: [in0] "r" (*(MYRTOS_TCB.Current_Task->Task_Current_PSP)));
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 8000892:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	461c      	mov	r4, r3
	(MYRTOS_TCB.Current_Task->Task_Current_PSP)++;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 800089e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a4:	3204      	adds	r2, #4
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set SP To PSP Of Next Task */
	SET_PSP(MYRTOS_TCB.Current_Task->Task_Current_PSP);
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <PendSV_ContextSwitch+0x1bc>)
 80008aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b0:	f383 8809 	msr	PSP, r3
	__asm volatile("BX LR");
 80008b4:	4770      	bx	lr

}
 80008b6:	bf00      	nop
 80008b8:	2000001c 	.word	0x2000001c

080008bc <Dispatch_Next_Task>:


void Dispatch_Next_Task(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	/* Handle Tasks */
	if((Ready_Queue.count == 0) && (MYRTOS_TCB.Current_Task->Task_State == SUSPEND))/* Ready Queue Is Empty and Last Task Is Suspended */
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <Dispatch_Next_Task+0xcc>)
 80008c2:	7b5b      	ldrb	r3, [r3, #13]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d113      	bne.n	80008f0 <Dispatch_Next_Task+0x34>
 80008c8:	4b30      	ldr	r3, [pc, #192]	; (800098c <Dispatch_Next_Task+0xd0>)
 80008ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10c      	bne.n	80008f0 <Dispatch_Next_Task+0x34>
	{
		idle_task.Task_State = RUNNING;
 80008d6:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <Dispatch_Next_Task+0xd4>)
 80008d8:	2203      	movs	r2, #3
 80008da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		FIFO_enqueue(&Ready_Queue, &idle_task);
 80008de:	492c      	ldr	r1, [pc, #176]	; (8000990 <Dispatch_Next_Task+0xd4>)
 80008e0:	4829      	ldr	r0, [pc, #164]	; (8000988 <Dispatch_Next_Task+0xcc>)
 80008e2:	f7ff fe29 	bl	8000538 <FIFO_enqueue>
		MYRTOS_TCB.Next_Task = &idle_task;
 80008e6:	4b29      	ldr	r3, [pc, #164]	; (800098c <Dispatch_Next_Task+0xd0>)
 80008e8:	4a29      	ldr	r2, [pc, #164]	; (8000990 <Dispatch_Next_Task+0xd4>)
 80008ea:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 80008ee:	e049      	b.n	8000984 <Dispatch_Next_Task+0xc8>

	}else if((Ready_Queue.count == 0) && (MYRTOS_TCB.Current_Task->Task_State != SUSPEND))/* Ready Queue Is Empty and There is a Task Not Suspended */
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <Dispatch_Next_Task+0xcc>)
 80008f2:	7b5b      	ldrb	r3, [r3, #13]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d11a      	bne.n	800092e <Dispatch_Next_Task+0x72>
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <Dispatch_Next_Task+0xd0>)
 80008fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000902:	2b00      	cmp	r3, #0
 8000904:	d013      	beq.n	800092e <Dispatch_Next_Task+0x72>
	{
		MYRTOS_TCB.Current_Task->Task_State = RUNNING;
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <Dispatch_Next_Task+0xd0>)
 8000908:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800090c:	2203      	movs	r2, #3
 800090e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		FIFO_enqueue(&Ready_Queue, MYRTOS_TCB.Current_Task);
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <Dispatch_Next_Task+0xd0>)
 8000914:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000918:	4619      	mov	r1, r3
 800091a:	481b      	ldr	r0, [pc, #108]	; (8000988 <Dispatch_Next_Task+0xcc>)
 800091c:	f7ff fe0c 	bl	8000538 <FIFO_enqueue>
		MYRTOS_TCB.Next_Task = MYRTOS_TCB.Current_Task;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <Dispatch_Next_Task+0xd0>)
 8000922:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000926:	4a19      	ldr	r2, [pc, #100]	; (800098c <Dispatch_Next_Task+0xd0>)
 8000928:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
 800092c:	e02a      	b.n	8000984 <Dispatch_Next_Task+0xc8>

	}else/* Ready Queue Is Not Empty */
	{
		FIFO_dequeue(&Ready_Queue, &MYRTOS_TCB.Next_Task);
 800092e:	4919      	ldr	r1, [pc, #100]	; (8000994 <Dispatch_Next_Task+0xd8>)
 8000930:	4815      	ldr	r0, [pc, #84]	; (8000988 <Dispatch_Next_Task+0xcc>)
 8000932:	f7ff fe43 	bl	80005bc <FIFO_dequeue>
		MYRTOS_TCB.Next_Task->Task_State = RUNNING;
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <Dispatch_Next_Task+0xd0>)
 8000938:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800093c:	2203      	movs	r2, #3
 800093e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* Update Ready Queue (Round Robin) */
		if((MYRTOS_TCB.Current_Task->Task_Priority == MYRTOS_TCB.Next_Task->Task_Priority) && (MYRTOS_TCB.Current_Task->Task_State != SUSPEND))
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <Dispatch_Next_Task+0xd0>)
 8000944:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000948:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <Dispatch_Next_Task+0xd0>)
 800094e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000956:	429a      	cmp	r2, r3
 8000958:	d114      	bne.n	8000984 <Dispatch_Next_Task+0xc8>
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <Dispatch_Next_Task+0xd0>)
 800095c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000960:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00d      	beq.n	8000984 <Dispatch_Next_Task+0xc8>
		{
			FIFO_enqueue(&Ready_Queue, MYRTOS_TCB.Current_Task);
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <Dispatch_Next_Task+0xd0>)
 800096a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <Dispatch_Next_Task+0xcc>)
 8000972:	f7ff fde1 	bl	8000538 <FIFO_enqueue>
			MYRTOS_TCB.Current_Task->Task_State = READY;
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <Dispatch_Next_Task+0xd0>)
 8000978:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800097c:	2202      	movs	r2, #2
 800097e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		}

	}
}
 8000982:	e7ff      	b.n	8000984 <Dispatch_Next_Task+0xc8>
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000204 	.word	0x20000204
 800098c:	2000001c 	.word	0x2000001c
 8000990:	200003a8 	.word	0x200003a8
 8000994:	200001c0 	.word	0x200001c0

08000998 <SVC_services>:

void SVC_services(uint32_t* p_StackFrame)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	/* 	Stack -> R0 -> Argument0 = p_StackFrame */
	uint8_t SVC_serviceNumber;

	/* Access Address in PC [6] Then Read First Byte From [-2] To Get Service Number */
	SVC_serviceNumber = (((uint8_t*)p_StackFrame[6])[-2]);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3318      	adds	r3, #24
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3b02      	subs	r3, #2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	73fb      	strb	r3, [r7, #15]

	switch(SVC_serviceNumber)
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db21      	blt.n	80009f6 <SVC_services+0x5e>
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	dd02      	ble.n	80009bc <SVC_services+0x24>
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d01a      	beq.n	80009f0 <SVC_services+0x58>
		/* Update Scheduler */
		Update_Scheduler();
		break;

	default:
		break;
 80009ba:	e01c      	b.n	80009f6 <SVC_services+0x5e>
		Update_Scheduler();
 80009bc:	f000 f892 	bl	8000ae4 <Update_Scheduler>
		if(MYRTOS_TCB.RTOS_CurrentState == RTOS_RUNNING)
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <SVC_services+0x6c>)
 80009c2:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d117      	bne.n	80009fa <SVC_services+0x62>
			if(strcmp((sint8_t*)MYRTOS_TCB.Current_Task->Task_Name, "IDLE_TASK") != 0)
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <SVC_services+0x6c>)
 80009cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009d0:	490d      	ldr	r1, [pc, #52]	; (8000a08 <SVC_services+0x70>)
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fbcc 	bl	8000170 <strcmp>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d00d      	beq.n	80009fa <SVC_services+0x62>
				Dispatch_Next_Task();
 80009de:	f7ff ff6d 	bl	80008bc <Dispatch_Next_Task>
				Trigger_PendSV();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <SVC_services+0x74>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <SVC_services+0x74>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6053      	str	r3, [r2, #4]
		break;
 80009ee:	e004      	b.n	80009fa <SVC_services+0x62>
		Update_Scheduler();
 80009f0:	f000 f878 	bl	8000ae4 <Update_Scheduler>
		break;
 80009f4:	e002      	b.n	80009fc <SVC_services+0x64>
		break;
 80009f6:	bf00      	nop
 80009f8:	e000      	b.n	80009fc <SVC_services+0x64>
		break;
 80009fa:	bf00      	nop
	}

}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000001c 	.word	0x2000001c
 8000a08:	08001008 	.word	0x08001008
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Set_MSP>:


void Set_MSP(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	/* Set Boundaries Of MSP  */
	MYRTOS_TCB._S_MSP = (uint32_t)&_estack;
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <Set_MSP+0x34>)
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <Set_MSP+0x38>)
 8000a18:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	MYRTOS_TCB._E_MSP = (MYRTOS_TCB._S_MSP - MSP_SIZE);
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <Set_MSP+0x38>)
 8000a1e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000a22:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <Set_MSP+0x38>)
 8000a28:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	/* Set Start Of PSP, ALIGN(8)  */
	MYRTOS_TCB.PSP_Locator = (MYRTOS_TCB._E_MSP - 8);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <Set_MSP+0x38>)
 8000a2e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000a32:	3b08      	subs	r3, #8
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <Set_MSP+0x38>)
 8000a36:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20005000 	.word	0x20005000
 8000a48:	2000001c 	.word	0x2000001c

08000a4c <IDLE_Task>:


void IDLE_Task(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTask_Led ^= 1; 
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <IDLE_Task+0x18>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	f083 0301 	eor.w	r3, r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <IDLE_Task+0x18>)
 8000a5c:	701a      	strb	r2, [r3, #0]
		WFE();
 8000a5e:	bf20      	wfe
		IdleTask_Led ^= 1; 
 8000a60:	e7f6      	b.n	8000a50 <IDLE_Task+0x4>
 8000a62:	bf00      	nop
 8000a64:	200003a4 	.word	0x200003a4

08000a68 <Create_Task_Stack>:
	}
}


void Create_Task_Stack(TASK_REF* task)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Assign PSP of Task To Begin of Stack */
	task->Task_Current_PSP = (uint32_t*) task->Task_S_PSP;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	461a      	mov	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34

	/* Create Stack Frame */		/* Pushed By CPU : XPSR, PC, LR, R12, R3, R2, R1, R0
	  	  	  	  	  	  	  	  	   Pushed By Code : R4, R5, R6, R7, R9, R11				*/
	(task->Task_Current_PSP)--;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7e:	1f1a      	subs	r2, r3, #4
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	635a      	str	r2, [r3, #52]	; 0x34
	*(task->Task_Current_PSP) = 0x01000000; /* Push Dummy xPSR to Stack , Bit-24 Is Set Due To thumb */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a8c:	601a      	str	r2, [r3, #0]

	(task->Task_Current_PSP)--;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	1f1a      	subs	r2, r3, #4
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
	*(task->Task_Current_PSP) = (uint32_t) task->p_Task_Entery; /* Push PC in Stack */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa0:	601a      	str	r2, [r3, #0]

	(task->Task_Current_PSP)--;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa6:	1f1a      	subs	r2, r3, #4
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
	*(task->Task_Current_PSP) = 0xFFFFFFFD; /* Push LR in Stack */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab0:	f06f 0202 	mvn.w	r2, #2
 8000ab4:	601a      	str	r2, [r3, #0]

	for(i = 0; i < 13; i++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e00b      	b.n	8000ad4 <Create_Task_Stack+0x6c>
	{
		(task->Task_Current_PSP)--;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac0:	1f1a      	subs	r2, r3, #4
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
		*(task->Task_Current_PSP) = 0x00000000; /* Push R0, R2, R3, ..., R12 in Stack */
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 13; i++)
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b0c      	cmp	r3, #12
 8000ad8:	d9f0      	bls.n	8000abc <Create_Task_Stack+0x54>
	}

}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <Update_Scheduler>:

void Update_Scheduler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
	TASK_REF* temp = NULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
	TASK_REF* p_task;
	TASK_REF* p_nexttask;

	/* Sort The Tasks Based On The Priority */
	Bubble_Sort();
 8000af2:	f000 f85d 	bl	8000bb0 <Bubble_Sort>

	/* Free The Ready Queue */
	while(FIFO_dequeue(&Ready_Queue, &temp) != FIFO_EMPTY);
 8000af6:	bf00      	nop
 8000af8:	463b      	mov	r3, r7
 8000afa:	4619      	mov	r1, r3
 8000afc:	482a      	ldr	r0, [pc, #168]	; (8000ba8 <Update_Scheduler+0xc4>)
 8000afe:	f7ff fd5d 	bl	80005bc <FIFO_dequeue>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d1f7      	bne.n	8000af8 <Update_Scheduler+0x14>

	/* Fill The Ready Queue */
	while(i < MYRTOS_TCB.Number_Of_Active_Tasks)
 8000b08:	e041      	b.n	8000b8e <Update_Scheduler+0xaa>
	{
		p_task = MYRTOS_TCB.Task[i];
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	4a27      	ldr	r2, [pc, #156]	; (8000bac <Update_Scheduler+0xc8>)
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	60bb      	str	r3, [r7, #8]
		p_nexttask = MYRTOS_TCB.Task[i+1];
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a24      	ldr	r2, [pc, #144]	; (8000bac <Update_Scheduler+0xc8>)
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	607b      	str	r3, [r7, #4]

		if(p_task->Task_State != SUSPEND)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d02e      	beq.n	8000b88 <Update_Scheduler+0xa4>
		{
			/* In Case Last Task in The Table */
			if(p_nexttask->Task_State == SUSPEND)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d108      	bne.n	8000b46 <Update_Scheduler+0x62>
			{
				FIFO_enqueue(&Ready_Queue, p_task);
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <Update_Scheduler+0xc4>)
 8000b38:	f7ff fcfe 	bl	8000538 <FIFO_enqueue>
				p_task->Task_State = READY;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	2202      	movs	r2, #2
 8000b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				break;
 8000b44:	e02b      	b.n	8000b9e <Update_Scheduler+0xba>
			}

			/* Check Priority of Tasks Already Sorted */
			if(p_task->Task_Priority < p_nexttask->Task_Priority)
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d208      	bcs.n	8000b68 <Update_Scheduler+0x84>
			{

				FIFO_enqueue(&Ready_Queue, p_task);
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <Update_Scheduler+0xc4>)
 8000b5a:	f7ff fced 	bl	8000538 <FIFO_enqueue>
				p_task->Task_State = READY;
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2202      	movs	r2, #2
 8000b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				break;
 8000b66:	e01a      	b.n	8000b9e <Update_Scheduler+0xba>

			}else if(p_task->Task_Priority == p_nexttask->Task_Priority)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d111      	bne.n	8000b9c <Update_Scheduler+0xb8>
			{
				FIFO_enqueue(&Ready_Queue, p_task);
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <Update_Scheduler+0xc4>)
 8000b7c:	f7ff fcdc 	bl	8000538 <FIFO_enqueue>
				p_task->Task_State = READY;
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	2202      	movs	r2, #2
 8000b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				/* MISRA */
				break;
			}
		}

		i++;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
	while(i < MYRTOS_TCB.Number_Of_Active_Tasks)
 8000b8e:	7bfa      	ldrb	r2, [r7, #15]
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <Update_Scheduler+0xc8>)
 8000b92:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d3b7      	bcc.n	8000b0a <Update_Scheduler+0x26>
	}
}
 8000b9a:	e000      	b.n	8000b9e <Update_Scheduler+0xba>
				break;
 8000b9c:	bf00      	nop
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000204 	.word	0x20000204
 8000bac:	2000001c 	.word	0x2000001c

08000bb0 <Bubble_Sort>:

void Bubble_Sort(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
	uint8_t i,j,n;
	TASK_REF* temp;

	n = MYRTOS_TCB.Number_Of_Active_Tasks;
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <Bubble_Sort+0x90>)
 8000bb8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000bbc:	717b      	strb	r3, [r7, #5]

	for(i = 0; i < n - 1; i++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e032      	b.n	8000c2a <Bubble_Sort+0x7a>
	{
		for(j = 0; j < n - i - 1; j++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71bb      	strb	r3, [r7, #6]
 8000bc8:	e025      	b.n	8000c16 <Bubble_Sort+0x66>
		{
			/* Smaller Number Priority Is Higher Priority */
			if((MYRTOS_TCB.Task[j]->Task_Priority) > (MYRTOS_TCB.Task[j+1]->Task_Priority) )
 8000bca:	79bb      	ldrb	r3, [r7, #6]
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <Bubble_Sort+0x90>)
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000bd6:	79bb      	ldrb	r3, [r7, #6]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4919      	ldr	r1, [pc, #100]	; (8000c40 <Bubble_Sort+0x90>)
 8000bdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000be0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d913      	bls.n	8000c10 <Bubble_Sort+0x60>
			{
				/* Swap Tasks */
				temp = MYRTOS_TCB.Task[j];
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <Bubble_Sort+0x90>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	603b      	str	r3, [r7, #0]
				MYRTOS_TCB.Task[j] = MYRTOS_TCB.Task[j+1];
 8000bf2:	79bb      	ldrb	r3, [r7, #6]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	4911      	ldr	r1, [pc, #68]	; (8000c40 <Bubble_Sort+0x90>)
 8000bfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bfe:	4910      	ldr	r1, [pc, #64]	; (8000c40 <Bubble_Sort+0x90>)
 8000c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				MYRTOS_TCB.Task[j+1] = temp;
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	3301      	adds	r3, #1
 8000c08:	490d      	ldr	r1, [pc, #52]	; (8000c40 <Bubble_Sort+0x90>)
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j = 0; j < n - i - 1; j++)
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	3301      	adds	r3, #1
 8000c14:	71bb      	strb	r3, [r7, #6]
 8000c16:	79ba      	ldrb	r2, [r7, #6]
 8000c18:	7979      	ldrb	r1, [r7, #5]
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	1acb      	subs	r3, r1, r3
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbd2      	blt.n	8000bca <Bubble_Sort+0x1a>
	for(i = 0; i < n - 1; i++)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	3301      	adds	r3, #1
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	797b      	ldrb	r3, [r7, #5]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbc7      	blt.n	8000bc4 <Bubble_Sort+0x14>
			}
		}
	}
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	2000001c 	.word	0x2000001c

08000c44 <MYRTOS_Init>:

/*===============================================================================
 *                         	   APIs Definitions 		   		                 *
 ================================================================================*/
RTOS_ERROR_STATE MYRTOS_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	RTOS_ERROR_STATE error_state = NO_ERROR;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]

	/* Set RTOS Mode To Suspend */
	MYRTOS_TCB.RTOS_CurrentState = RTOS_SUSPEND;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <MYRTOS_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	/* Set Number of Active Task */
	MYRTOS_TCB.Number_Of_Active_Tasks = 0;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MYRTOS_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

	/* Set MSP */
	Set_MSP();
 8000c5e:	f7ff fed7 	bl	8000a10 <Set_MSP>

	/* Create RTOS Ready FIFO */
	if(FIFO_init(&Ready_Queue, Ready_Queue_Buff, MAX_NO_OF_TASKS) != FIFO_NO_ERROR)
 8000c62:	2264      	movs	r2, #100	; 0x64
 8000c64:	4911      	ldr	r1, [pc, #68]	; (8000cac <MYRTOS_Init+0x68>)
 8000c66:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <MYRTOS_Init+0x6c>)
 8000c68:	f7ff fc45 	bl	80004f6 <FIFO_init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <MYRTOS_Init+0x34>
		error_state += READY_FIFO_INIT_ERROR;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	3301      	adds	r3, #1
 8000c76:	71fb      	strb	r3, [r7, #7]

	/* Set Idle Task */
	strcpy(idle_task.Task_Name,"IDLE_TASK");
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MYRTOS_Init+0x70>)
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <MYRTOS_Init+0x74>)
 8000c7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c7e:	c303      	stmia	r3!, {r0, r1}
 8000c80:	801a      	strh	r2, [r3, #0]
	idle_task.Task_StackSize = 256;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MYRTOS_Init+0x70>)
 8000c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c88:	621a      	str	r2, [r3, #32]
	idle_task.Task_Priority = 100;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MYRTOS_Init+0x70>)
 8000c8c:	2264      	movs	r2, #100	; 0x64
 8000c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	idle_task.p_Task_Entery = IDLE_Task;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MYRTOS_Init+0x70>)
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <MYRTOS_Init+0x78>)
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28

	MYRTOS_CreateTask(&idle_task);
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MYRTOS_Init+0x70>)
 8000c9a:	f000 f84f 	bl	8000d3c <MYRTOS_CreateTask>


	return error_state;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000001c 	.word	0x2000001c
 8000cac:	20000214 	.word	0x20000214
 8000cb0:	20000204 	.word	0x20000204
 8000cb4:	200003a8 	.word	0x200003a8
 8000cb8:	08001008 	.word	0x08001008
 8000cbc:	08000a4d 	.word	0x08000a4d

08000cc0 <MYRTOS_StartRTOS>:

RTOS_ERROR_STATE MYRTOS_StartRTOS(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
	RTOS_ERROR_STATE error_state = NO_ERROR;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	71fb      	strb	r3, [r7, #7]

	/* Update RTOS State */
	MYRTOS_TCB.RTOS_CurrentState = RTOS_RUNNING;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MYRTOS_StartRTOS+0x74>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	/* Set Current Task To Idle */
	MYRTOS_TCB.Current_Task = &idle_task;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MYRTOS_StartRTOS+0x74>)
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <MYRTOS_StartRTOS+0x78>)
 8000cd6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	/* Activate Current Task */
	error_state += MYRTOS_ActivateTask(MYRTOS_TCB.Current_Task);
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MYRTOS_StartRTOS+0x74>)
 8000cdc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f85f 	bl	8000da4 <MYRTOS_ActivateTask>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4413      	add	r3, r2
 8000cee:	71fb      	strb	r3, [r7, #7]

	/* Start The Ticker */
	MyRTOS_StartTicker();
 8000cf0:	f7ff fbf9 	bl	80004e6 <MyRTOS_StartTicker>

	/* Set PSP To Current Task */
	SET_PSP(MYRTOS_TCB.Current_Task->Task_Current_PSP);
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MYRTOS_StartRTOS+0x74>)
 8000cf6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfc:	f383 8809 	msr	PSP, r3

	/* Switch SP -> PSP */
	SET_SP_TO_PSP();
 8000d00:	f3ef 8014 	mrs	r0, CONTROL
 8000d04:	f04f 0102 	mov.w	r1, #2
 8000d08:	ea40 0001 	orr.w	r0, r0, r1
 8000d0c:	f380 8814 	msr	CONTROL, r0

	/* Switch To Unprivileged Access Level */
	UNPRIVILEGED_ACCESS_LEVEL();
 8000d10:	f3ef 8014 	mrs	r0, CONTROL
 8000d14:	f04f 0101 	mov.w	r1, #1
 8000d18:	ea40 0001 	orr.w	r0, r0, r1
 8000d1c:	f380 8814 	msr	CONTROL, r0

	/* Set Task Entry */
	MYRTOS_TCB.Current_Task->p_Task_Entery();
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <MYRTOS_StartRTOS+0x74>)
 8000d22:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	4798      	blx	r3

	return error_state;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000001c 	.word	0x2000001c
 8000d38:	200003a8 	.word	0x200003a8

08000d3c <MYRTOS_CreateTask>:


RTOS_ERROR_STATE MYRTOS_CreateTask(TASK_REF* task)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	RTOS_ERROR_STATE error_state = NO_ERROR;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

	/* Set Boundaries PSP */
	task->Task_S_PSP = MYRTOS_TCB.PSP_Locator;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MYRTOS_CreateTask+0x64>)
 8000d4a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
	task->Task_E_PSP = task->Task_S_PSP - task->Task_StackSize;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	1ad2      	subs	r2, r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set PSP Locator, ALIGN(8)  */
	MYRTOS_TCB.PSP_Locator = task->Task_E_PSP - 8;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	3b08      	subs	r3, #8
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <MYRTOS_CreateTask+0x64>)
 8000d68:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	//	/* Check Boundaries of Stack */
	//	if(task->Task_E_PSP < ((uint32_t)&_eheap))
	//		return TASK_EXCEED_STACK_BAOUNDARIES;

	/* Create Stack of Task */
	Create_Task_Stack(task);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fe7b 	bl	8000a68 <Create_Task_Stack>

	/* Assign Task To TCB */
	MYRTOS_TCB.Task[MYRTOS_TCB.Number_Of_Active_Tasks] = task;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MYRTOS_CreateTask+0x64>)
 8000d74:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d78:	4909      	ldr	r1, [pc, #36]	; (8000da0 <MYRTOS_CreateTask+0x64>)
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	(MYRTOS_TCB.Number_Of_Active_Tasks)++;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MYRTOS_CreateTask+0x64>)
 8000d82:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <MYRTOS_CreateTask+0x64>)
 8000d8a:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	/* Set Task State To Suspended */
	task->Task_State = SUSPEND;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


	return error_state;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000001c 	.word	0x2000001c

08000da4 <MYRTOS_ActivateTask>:


RTOS_ERROR_STATE MYRTOS_ActivateTask(TASK_REF* task)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	RTOS_ERROR_STATE error_state = NO_ERROR;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]

	/* Set Task State To Waiting */
	task->Task_State = WAITING;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	/* Call SVC Exception */
	SVC_SET(ACTIVATE_TASK);
 8000db8:	df00      	svc	0

	return error_state;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <MYRTOS_WaitTask>:

	return error_state;
}

RTOS_ERROR_STATE MYRTOS_WaitTask(TASK_REF* task, uint32_t a_BlockTicks)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
	RTOS_ERROR_STATE error_state = NO_ERROR;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

	/* Set Waiting Time and Task Blocking State */
	task->Task_WaitingTime.Task_Bloking = BLOCKING_ENABLED;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	task->Task_WaitingTime.Task_WaitingTicsCount = a_BlockTicks;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Set Task State */
	task->Task_State = SUSPEND;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	/* Terminate Task Temporary */
	SVC_SET(TERMINATE_TASK);
 8000dea:	df01      	svc	1

	return error_state;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <Task3_Fun>:
//		}
//	}
//}

void Task3_Fun(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	while(1)
	{
		Task3_Led ^= 1;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <Task3_Fun+0x1c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	f083 0301 	eor.w	r3, r3, #1
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <Task3_Fun+0x1c>)
 8000e08:	701a      	strb	r2, [r3, #0]
		MYRTOS_WaitTask(&task3, 100);
 8000e0a:	2164      	movs	r1, #100	; 0x64
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <Task3_Fun+0x20>)
 8000e0e:	f7ff ffda 	bl	8000dc6 <MYRTOS_WaitTask>
		Task3_Led ^= 1;
 8000e12:	e7f3      	b.n	8000dfc <Task3_Fun+0x4>
 8000e14:	200004bd 	.word	0x200004bd
 8000e18:	200004c0 	.word	0x200004c0

08000e1c <Task2_Fun>:
	}
}

void Task2_Fun(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Led ^= 1;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <Task2_Fun+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	f083 0301 	eor.w	r3, r3, #1
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <Task2_Fun+0x20>)
 8000e2c:	701a      	strb	r2, [r3, #0]
		MYRTOS_WaitTask(&task2, 300);
 8000e2e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <Task2_Fun+0x24>)
 8000e34:	f7ff ffc7 	bl	8000dc6 <MYRTOS_WaitTask>
		Task2_Led ^= 1;
 8000e38:	e7f2      	b.n	8000e20 <Task2_Fun+0x4>
 8000e3a:	bf00      	nop
 8000e3c:	200004be 	.word	0x200004be
 8000e40:	20000478 	.word	0x20000478

08000e44 <Task1_Fun>:
	}
}

void Task1_Fun(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_Led ^= 1;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <Task1_Fun+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	f083 0301 	eor.w	r3, r3, #1
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <Task1_Fun+0x20>)
 8000e54:	701a      	strb	r2, [r3, #0]
		MYRTOS_WaitTask(&task1, 500);
 8000e56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <Task1_Fun+0x24>)
 8000e5c:	f7ff ffb3 	bl	8000dc6 <MYRTOS_WaitTask>
		Task1_Led ^= 1;
 8000e60:	e7f2      	b.n	8000e48 <Task1_Fun+0x4>
 8000e62:	bf00      	nop
 8000e64:	200004bc 	.word	0x200004bc
 8000e68:	20000434 	.word	0x20000434

08000e6c <System_Init>:
	}
}

void System_Init(void)
{	
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

	/* Initialize HardWare */
	MyRTOS_HW_Init();
 8000e70:	f7ff fb2e 	bl	80004d0 <MyRTOS_HW_Init>

	/* Initialize The RTOS */
	MYRTOS_Init();
 8000e74:	f7ff fee6 	bl	8000c44 <MYRTOS_Init>

	/* Initialize The Tasks */

	strcpy(task1.Task_Name,"TASK_1");
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <System_Init+0xb8>)
 8000e7a:	4a2b      	ldr	r2, [pc, #172]	; (8000f28 <System_Init+0xbc>)
 8000e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e80:	6018      	str	r0, [r3, #0]
 8000e82:	3304      	adds	r3, #4
 8000e84:	8019      	strh	r1, [r3, #0]
 8000e86:	3302      	adds	r3, #2
 8000e88:	0c0a      	lsrs	r2, r1, #16
 8000e8a:	701a      	strb	r2, [r3, #0]
	task1.Task_StackSize = 1024;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <System_Init+0xb8>)
 8000e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e92:	621a      	str	r2, [r3, #32]
	task1.Task_Priority = 3;
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <System_Init+0xb8>)
 8000e96:	2203      	movs	r2, #3
 8000e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	task1.p_Task_Entery = Task1_Fun;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <System_Init+0xb8>)
 8000e9e:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <System_Init+0xc0>)
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
	MYRTOS_CreateTask(&task1);
 8000ea2:	4820      	ldr	r0, [pc, #128]	; (8000f24 <System_Init+0xb8>)
 8000ea4:	f7ff ff4a 	bl	8000d3c <MYRTOS_CreateTask>

	strcpy(task2.Task_Name,"TASK_2");
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <System_Init+0xc4>)
 8000eaa:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <System_Init+0xc8>)
 8000eac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb0:	6018      	str	r0, [r3, #0]
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	8019      	strh	r1, [r3, #0]
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	0c0a      	lsrs	r2, r1, #16
 8000eba:	701a      	strb	r2, [r3, #0]
	task2.Task_StackSize = 1024;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <System_Init+0xc4>)
 8000ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec2:	621a      	str	r2, [r3, #32]
	task2.Task_Priority = 3;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <System_Init+0xc4>)
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	task2.p_Task_Entery = Task2_Fun;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <System_Init+0xc4>)
 8000ece:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <System_Init+0xcc>)
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
	MYRTOS_CreateTask(&task2);
 8000ed2:	4817      	ldr	r0, [pc, #92]	; (8000f30 <System_Init+0xc4>)
 8000ed4:	f7ff ff32 	bl	8000d3c <MYRTOS_CreateTask>

	strcpy(task3.Task_Name,"TASK_3");
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <System_Init+0xd0>)
 8000eda:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <System_Init+0xd4>)
 8000edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee0:	6018      	str	r0, [r3, #0]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	8019      	strh	r1, [r3, #0]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	0c0a      	lsrs	r2, r1, #16
 8000eea:	701a      	strb	r2, [r3, #0]
	task3.Task_StackSize = 1024;
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <System_Init+0xd0>)
 8000eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef2:	621a      	str	r2, [r3, #32]
	task3.Task_Priority = 3;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <System_Init+0xd0>)
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	task3.p_Task_Entery = Task3_Fun;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <System_Init+0xd0>)
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <System_Init+0xd8>)
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
	MYRTOS_CreateTask(&task3);
 8000f02:	480e      	ldr	r0, [pc, #56]	; (8000f3c <System_Init+0xd0>)
 8000f04:	f7ff ff1a 	bl	8000d3c <MYRTOS_CreateTask>
//	task4.Task_Priority = 1;
//	task4.p_Task_Entery = Task4_Fun;
//	MYRTOS_CreateTask(&task4);


	MYRTOS_ActivateTask(&task1);
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <System_Init+0xb8>)
 8000f0a:	f7ff ff4b 	bl	8000da4 <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&task2);
 8000f0e:	4808      	ldr	r0, [pc, #32]	; (8000f30 <System_Init+0xc4>)
 8000f10:	f7ff ff48 	bl	8000da4 <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&task3);
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <System_Init+0xd0>)
 8000f16:	f7ff ff45 	bl	8000da4 <MYRTOS_ActivateTask>



	MYRTOS_StartRTOS();
 8000f1a:	f7ff fed1 	bl	8000cc0 <MYRTOS_StartRTOS>

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000434 	.word	0x20000434
 8000f28:	08001014 	.word	0x08001014
 8000f2c:	08000e45 	.word	0x08000e45
 8000f30:	20000478 	.word	0x20000478
 8000f34:	0800101c 	.word	0x0800101c
 8000f38:	08000e1d 	.word	0x08000e1d
 8000f3c:	200004c0 	.word	0x200004c0
 8000f40:	08001024 	.word	0x08001024
 8000f44:	08000df9 	.word	0x08000df9

08000f48 <main>:



int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	/* Function To Initiate The System (RTOS,HW,RCC) */
	System_Init();
 8000f4c:	f7ff ff8e 	bl	8000e6c <System_Init>

	while(1)
 8000f50:	e7fe      	b.n	8000f50 <main+0x8>
	...

08000f54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f56:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	; (8000f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <LoopForever+0xe>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	; (8000fa0 <LoopForever+0x16>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f82:	f000 f811 	bl	8000fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f86:	f7ff ffdf 	bl	8000f48 <main>

08000f8a <LoopForever>:

LoopForever:
    b LoopForever
 8000f8a:	e7fe      	b.n	8000f8a <LoopForever>
  ldr   r0, =_estack
 8000f8c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f98:	08001034 	.word	0x08001034
  ldr r2, =_sbss
 8000f9c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fa0:	20000504 	.word	0x20000504

08000fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_2_IRQHandler>
	...

08000fa8 <__libc_init_array>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2500      	movs	r5, #0
 8000fac:	4e0c      	ldr	r6, [pc, #48]	; (8000fe0 <__libc_init_array+0x38>)
 8000fae:	4c0d      	ldr	r4, [pc, #52]	; (8000fe4 <__libc_init_array+0x3c>)
 8000fb0:	1ba4      	subs	r4, r4, r6
 8000fb2:	10a4      	asrs	r4, r4, #2
 8000fb4:	42a5      	cmp	r5, r4
 8000fb6:	d109      	bne.n	8000fcc <__libc_init_array+0x24>
 8000fb8:	f000 f81a 	bl	8000ff0 <_init>
 8000fbc:	2500      	movs	r5, #0
 8000fbe:	4e0a      	ldr	r6, [pc, #40]	; (8000fe8 <__libc_init_array+0x40>)
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <__libc_init_array+0x44>)
 8000fc2:	1ba4      	subs	r4, r4, r6
 8000fc4:	10a4      	asrs	r4, r4, #2
 8000fc6:	42a5      	cmp	r5, r4
 8000fc8:	d105      	bne.n	8000fd6 <__libc_init_array+0x2e>
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
 8000fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fd0:	4798      	blx	r3
 8000fd2:	3501      	adds	r5, #1
 8000fd4:	e7ee      	b.n	8000fb4 <__libc_init_array+0xc>
 8000fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fda:	4798      	blx	r3
 8000fdc:	3501      	adds	r5, #1
 8000fde:	e7f2      	b.n	8000fc6 <__libc_init_array+0x1e>
 8000fe0:	0800102c 	.word	0x0800102c
 8000fe4:	0800102c 	.word	0x0800102c
 8000fe8:	0800102c 	.word	0x0800102c
 8000fec:	08001030 	.word	0x08001030

08000ff0 <_init>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	bf00      	nop
 8000ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff6:	bc08      	pop	{r3}
 8000ff8:	469e      	mov	lr, r3
 8000ffa:	4770      	bx	lr

08000ffc <_fini>:
 8000ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffe:	bf00      	nop
 8001000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001002:	bc08      	pop	{r3}
 8001004:	469e      	mov	lr, r3
 8001006:	4770      	bx	lr
